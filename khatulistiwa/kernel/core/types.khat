/*
 * ============================================================================
 * types.khat - Core Types untuk Khatulistiwa OS
 * Copyright (c) 2025 Dhafa Nazula Permadi & Team BIGCode By Cv Bintang Gumilang Group
 * ============================================================================
 * 
 * Core types dengan fitur:
 * 1. Basic data types dengan nama Indonesia
 * 2. Cultural types dan enums
 * 3. Traditional Indonesian constants
 * 4. System-wide type definitions
 * 5. Cultural theme definitions
 * 6. Gotong royong data structures
 */

// Basic integer types dengan nama Indonesia
typedef unsigned char       uint8_t;
typedef unsigned short      uint16_t;
typedef unsigned int        uint32_t;
typedef unsigned long long  uint64_t;

typedef signed char         int8_t;
typedef signed short        int16_t;
typedef signed int          int32_t;
typedef signed long long    int64_t;

// Size and pointer types
typedef uint64_t            size_t;
typedef int64_t             ssize_t;
typedef uint64_t            uintptr_t;
typedef int64_t             intptr_t;
typedef uint64_t            off_t;

// Boolean type dengan nama Indonesia
typedef enum {
    salah = 0,                      // false
    benar = 1                       // true
} bool;

#define false salah
#define true benar
#define null ((void*)0)

// Process and thread identifiers
typedef uint32_t ProcessID;
typedef uint32_t ThreadID;
typedef uint32_t TaskID;

// Cultural theme types
typedef enum {
    THEME_DEFAULT = 0,
    THEME_PARANG = 1,               // Parang batik theme
    THEME_KAWUNG = 2,               // Kawung batik theme
    THEME_MEGA_MENDUNG = 3,         // Mega Mendung theme
    THEME_CEPLOK = 4,               // Ceplok theme
    THEME_NITIK = 5,                // Nitik theme
    THEME_TRUNTUM = 6,              // Truntum theme
    THEME_SEKAR_JAGAD = 7,          // Sekar Jagad theme
    THEME_CUSTOM = 8                // Custom theme
} cultural_theme_t;

// Traditional Indonesian colors
typedef enum {
    WARNA_MERAH = 0xFF0000,         // Red
    WARNA_PUTIH = 0xFFFFFF,         // White
    WARNA_EMAS = 0xFFD700,          // Gold
    WARNA_HIJAU = 0x00FF00,         // Green
    WARNA_BIRU = 0x0000FF,          // Blue
    WARNA_COKLAT = 0x8B4513,        // Brown
    WARNA_HITAM = 0x000000,         // Black
    WARNA_UNGU = 0x800080           // Purple
} warna_indonesia_t;

// System constants dengan filosofi Indonesia
#define GOTONG_ROYONG_MAX_PARTICIPANTS  64
#define MUSYAWARAH_MAX_TOPICS          16
#define ADAT_MAX_RULES                 32
#define BUDAYA_MAX_ELEMENTS            128

// Memory alignment
#define ALIGN_4     4
#define ALIGN_8     8
#define ALIGN_16    16
#define ALIGN_32    32
#define ALIGN_64    64
#define ALIGN_PAGE  4096

// String and character limits
#define MAX_STRING_LENGTH       256
#define MAX_PATH_LENGTH         4096
#define MAX_FILENAME_LENGTH     255
#define MAX_TRADITIONAL_NAME    128

// System limits
#define MAX_PROCESSES           1024
#define MAX_THREADS_PER_PROCESS 64
#define MAX_OPEN_FILES          256
#define MAX_MEMORY_REGIONS      128

// Cultural system limits
#define MAX_CULTURAL_ATTRIBUTES 16
#define MAX_TRADITIONAL_ROLES   8
#define MAX_COMMUNITY_MEMBERS   256
#define MAX_SPIRITUAL_TOKENS    32

// Error codes dengan nama Indonesia
typedef enum {
    SUKSES = 0,                     // Success
    ERROR_UMUM = -1,                // General error
    ERROR_MEMORI = -2,              // Memory error
    ERROR_AKSES_DITOLAK = -3,       // Access denied
    ERROR_FILE_TIDAK_DITEMUKAN = -4,// File not found
    ERROR_PARAMETER_SALAH = -5,     // Invalid parameter
    ERROR_OPERASI_TIDAK_DIDUKUNG = -6, // Operation not supported
    ERROR_TIMEOUT = -7,             // Timeout
    ERROR_BUDAYA_TIDAK_SESUAI = -8, // Cultural mismatch
    ERROR_SPIRITUAL_GAGAL = -9,     // Spiritual failure
    ERROR_ADAT_DILANGGAR = -10      // Traditional rules violated
} error_code_t;

// File modes and permissions
typedef uint32_t mode_t;

#define MODE_READ       0x01
#define MODE_WRITE      0x02
#define MODE_EXECUTE    0x04
#define MODE_CULTURAL   0x08        // Cultural access
#define MODE_SPIRITUAL  0x10        // Spiritual access
#define MODE_COMMUNITY  0x20        // Community access

// Time types
typedef uint64_t time_t;
typedef uint32_t clock_t;

// Synchronization primitives
typedef struct {
    volatile uint32_t value;
    char name[32];
} spinlock_t;

typedef struct {
    volatile uint32_t state;
    ProcessID owner;
    char name[32];
    bool cultural_mutex;
} mutex_t;

typedef struct {
    volatile uint32_t readers;
    volatile uint32_t writers;
    mutex_t write_lock;
    char name[32];
} rwlock_t;

typedef struct {
    volatile uint32_t count;
    mutex_t lock;
    char name[32];
} semaphore_t;

typedef struct {
    volatile bool signaled;
    mutex_t lock;
    char name[32];
} condition_t;

typedef struct {
    volatile uint32_t event_mask;
    mutex_t lock;
    char name[32];
} event_t;

// Memory region descriptor
typedef struct {
    void *base_address;
    size_t size;
    uint32_t permissions;
    uint32_t flags;
    char name[64];
    bool cultural_region;
} memory_region_t;

// Cultural data structures
typedef struct {
    char traditional_name[64];
    char modern_name[64];
    char meaning[128];
    char origin_region[32];
    uint32_t cultural_significance;
} cultural_name_t;

typedef struct {
    cultural_theme_t theme;
    warna_indonesia_t primary_color;
    warna_indonesia_t secondary_color;
    char theme_name[32];
    char description[128];
} cultural_theme_info_t;

// Gotong royong data structures
typedef struct {
    ProcessID participant_id;
    char participant_name[64];
    uint32_t contribution_level;
    uint32_t cooperation_score;
    bool active;
} gotong_royong_participant_t;

typedef struct {
    uint32_t activity_id;
    char activity_name[64];
    char traditional_name[64];
    gotong_royong_participant_t participants[GOTONG_ROYONG_MAX_PARTICIPANTS];
    uint32_t participant_count;
    uint32_t completion_percentage;
    bool active;
} gotong_royong_activity_t;

// Traditional role definitions
typedef enum {
    ROLE_RAKYAT = 0,                // Common people
    ROLE_TETANGGA = 1,              // Neighbors
    ROLE_KELUARGA = 2,              // Family
    ROLE_TOKOH_MASYARAKAT = 3,      // Community leaders
    ROLE_TETUA_ADAT = 4,            // Traditional elders
    ROLE_PEMIMPIN_ADAT = 5,         // Traditional leaders
    ROLE_SPIRITUAL_LEADER = 6,      // Spiritual leaders
    ROLE_RAJA_ADAT = 7              // Traditional king
} traditional_role_t;

// System call numbers
typedef enum {
    SYSCALL_READ = 0,
    SYSCALL_WRITE = 1,
    SYSCALL_OPEN = 2,
    SYSCALL_CLOSE = 3,
    SYSCALL_FORK = 4,
    SYSCALL_EXEC = 5,
    SYSCALL_EXIT = 6,
    SYSCALL_WAIT = 7,
    SYSCALL_GOTONG_ROYONG = 100,    // Gotong royong system call
    SYSCALL_MUSYAWARAH = 101,       // Musyawarah system call
    SYSCALL_CULTURAL_BLESSING = 102, // Cultural blessing system call
    SYSCALL_ADAT_CHECK = 103        // Adat compliance check
} syscall_number_t;

// Hardware abstraction types
typedef struct {
    uint32_t vendor_id;
    uint32_t device_id;
    char vendor_name[64];
    char device_name[64];
    char cultural_name[64];
    void *base_address;
    size_t memory_size;
    uint32_t irq_number;
} hardware_device_t;

// Network types
typedef struct {
    uint8_t bytes[6];
} mac_address_t;

typedef struct {
    uint8_t bytes[4];
} ipv4_address_t;

typedef struct {
    uint8_t bytes[16];
} ipv6_address_t;

// Cultural network protocols
typedef enum {
    PROTOCOL_GOTONG_ROYONG_NET = 1, // Gotong royong networking
    PROTOCOL_SILATURAHMI = 2,       // Social networking protocol
    PROTOCOL_MUSYAWARAH_NET = 3,    // Deliberation networking
    PROTOCOL_BUDAYA_SHARE = 4       // Cultural sharing protocol
} cultural_protocol_t;

// Utility macros
#define ARRAY_SIZE(arr)     (sizeof(arr) / sizeof((arr)[0]))
#define MIN(a, b)           ((a) < (b) ? (a) : (b))
#define MAX(a, b)           ((a) > (b) ? (a) : (b))
#define ALIGN_UP(x, align)  (((x) + (align) - 1) & ~((align) - 1))
#define ALIGN_DOWN(x, align) ((x) & ~((align) - 1))

// Cultural utility macros
#define IS_CULTURAL_THEME(theme)    ((theme) >= THEME_PARANG && (theme) <= THEME_SEKAR_JAGAD)
#define IS_TRADITIONAL_ROLE(role)   ((role) >= ROLE_RAKYAT && (role) <= ROLE_RAJA_ADAT)
#define IS_GOTONG_ROYONG_ACTIVE(activity) ((activity)->active && (activity)->participant_count > 1)

// Bit manipulation macros
#define BIT(n)              (1UL << (n))
#define SET_BIT(x, n)       ((x) |= BIT(n))
#define CLEAR_BIT(x, n)     ((x) &= ~BIT(n))
#define TOGGLE_BIT(x, n)    ((x) ^= BIT(n))
#define TEST_BIT(x, n)      (((x) & BIT(n)) != 0)

// Memory barrier macros
#define MEMORY_BARRIER()    __asm__ volatile("" ::: "memory")
#define READ_BARRIER()      __asm__ volatile("lfence" ::: "memory")
#define WRITE_BARRIER()     __asm__ volatile("sfence" ::: "memory")

// Compiler attributes
#define PACKED              __attribute__((packed))
#define ALIGNED(n)          __attribute__((aligned(n)))
#define SECTION(name)       __attribute__((section(name)))
#define WEAK                __attribute__((weak))
#define NORETURN            __attribute__((noreturn))

// Cultural attributes for functions and data
#define CULTURAL            __attribute__((section(".cultural")))
#define TRADITIONAL         __attribute__((section(".traditional")))
#define SPIRITUAL           __attribute__((section(".spiritual")))
#define GOTONG_ROYONG       __attribute__((section(".gotong_royong")))

// Function pointer types
typedef int (*init_function_t)(void);
typedef void (*cleanup_function_t)(void);
typedef int (*cultural_init_function_t)(cultural_theme_t theme);
typedef void (*interrupt_handler_t)(uint32_t irq, void *context);

// Cultural function pointer types
typedef int (*gotong_royong_function_t)(gotong_royong_activity_t *activity);
typedef int (*musyawarah_function_t)(const char *topic, void *context);
typedef int (*cultural_blessing_function_t)(cultural_theme_t theme);
typedef bool (*adat_check_function_t)(traditional_role_t role, uint32_t action);

// System information structure
typedef struct {
    char system_name[64];
    char version[32];
    char build_date[32];
    char cultural_identity[64];
    uint64_t total_memory;
    uint32_t cpu_count;
    uint32_t active_processes;
    uint32_t loaded_modules;
    cultural_theme_t current_theme;
    bool gotong_royong_active;
    bool spiritual_protection_enabled;
} system_info_t;

// Platform-specific types
#ifdef PLATFORM_X86_64
typedef uint64_t register_t;
typedef uint64_t address_t;
#elif defined(PLATFORM_ARM64)
typedef uint64_t register_t;
typedef uint64_t address_t;
#elif defined(PLATFORM_RISCV64)
typedef uint64_t register_t;
typedef uint64_t address_t;
#else
typedef uint32_t register_t;
typedef uint32_t address_t;
#endif

// Cultural constants
#define CULTURAL_MAGIC      0x42554441  // 'BUDA' (Budaya)
#define GOTONG_ROYONG_MAGIC 0x474F544F  // 'GOTO' (Gotong)
#define SPIRITUAL_MAGIC     0x53504952  // 'SPIR' (Spiritual)
#define TRADITIONAL_MAGIC   0x54524144  // 'TRAD' (Traditional)

// Default cultural values
#define DEFAULT_CULTURAL_THEME      THEME_PARANG
#define DEFAULT_COOPERATION_LEVEL   5
#define DEFAULT_SPIRITUAL_LEVEL     3
#define DEFAULT_COMMUNITY_SIZE      32

// Logging levels dengan nama Indonesia
typedef enum {
    LOG_DEBUG = 0,                  // Debug
    LOG_INFO = 1,                   // Informasi
    LOG_PERINGATAN = 2,             // Warning
    LOG_ERROR = 3,                  // Error
    LOG_KRITIS = 4,                 // Critical
    LOG_BUDAYA = 5,                 // Cultural
    LOG_SPIRITUAL = 6               // Spiritual
} log_level_t;

// Forward declarations for complex types
struct Process;
struct Thread;
struct MemoryManager;
struct FileSystem;
struct NetworkInterface;
struct CulturalContext;
struct GotongRoyongManager;
struct SpiritualProtection;
