#!/usr/bin/env python3
"""
============================================================================
khatsdk.py - Khatulistiwa OS SDK CLI Tools
Copyright (c) 2025 Dhafa Nazula Permadi & Team BIGCode By Cv Bintang Gumilang Group
============================================================================

Professional CLI tools untuk pengembangan aplikasi .khapp:
- khatsdk init: Inisialisasi project baru
- khatsdk build: Build aplikasi .khapp
- khatsdk validate: Validasi aplikasi
"""

import os
import sys
import json
import argparse
import shutil
import subprocess
from pathlib import Path
from datetime import datetime

# Konstanta SDK
SDK_VERSION = "1.0.0"

# Warna output
class Colors:
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    BLUE = '\033[94m'
    ENDC = '\033[0m'

def print_header():
    """Print header SDK"""
    print(f"{Colors.CYAN}üåç ============================================")
    print("üåç KHATULISTIWA OS SDK - TOOLS PENGEMBANG")
    print(f"üåç ============================================{Colors.ENDC}")
    print(f"{Colors.BLUE}üì¶ SDK Version: {SDK_VERSION}{Colors.ENDC}")
    print(f"{Colors.CYAN}============================================={Colors.ENDC}")

def print_success(message):
    print(f"{Colors.GREEN}‚úÖ {message}{Colors.ENDC}")

def print_error(message):
    print(f"{Colors.RED}‚ùå {message}{Colors.ENDC}")

def print_info(message):
    print(f"{Colors.BLUE}‚ÑπÔ∏è  {message}{Colors.ENDC}")

def cmd_init(args):
    """Command: khatsdk init"""
    print_header()
    print_info(f"Menginisialisasi project baru: {args.name}")

    # Validasi nama project
    if not args.name or len(args.name) < 3:
        print_error("Nama project minimal 3 karakter")
        return 1

    # Cek apakah direktori sudah ada
    project_dir = Path(args.name)
    if project_dir.exists():
        print_error(f"Direktori '{args.name}' sudah ada")
        return 1

    try:
        # Buat direktori project
        project_dir.mkdir(parents=True)
        print_success(f"Direktori project '{args.name}' dibuat")

        # Buat subdirektori
        (project_dir / "resources").mkdir(parents=True)
        print_success("Struktur direktori dibuat")

        # Buat manifest.json
        manifest = {
            "name": args.name.title(),
            "version": "1.0.0",
            "description": f"Aplikasi {args.name} untuk Khatulistiwa OS",
            "author": args.author,
            "category": "productivity",
            "type": "application",
            "permissions": ["khatui_access"],
            "dependencies": ["khatui_runtime.khat", "khatcore_runtime.khat"],
            "min_os_version": "1.0.0",
            "ui_framework": "KhatUI"
        }

        manifest_path = project_dir / "manifest.json"
        with open(manifest_path, 'w', encoding='utf-8') as f:
            json.dump(manifest, f, indent=2, ensure_ascii=False)
        print_success("manifest.json dibuat")

        # Buat main.khat
        main_khat = f'''/*
 * {args.name}.khat - Aplikasi {args.name.title()} untuk Khatulistiwa OS
 * Generated by KhatSDK v{SDK_VERSION}
 */

import "khatui/runtime.khat"
import "khatcore/runtime.khat"

// Konstanta aplikasi
konstan APP_VERSION = "1.0.0"
konstan WINDOW_WIDTH = 800
konstan WINDOW_HEIGHT = 600

// State aplikasi
struct AppState {{
    main_window: int,
    is_running: bool
}}

var app_state: AppState

// Inisialisasi aplikasi
fungsi app_init() -> int {{
    khat_log("[{args.name.upper()}] Menginisialisasi {args.name.title()}")

    app_state.is_running = true

    // Buat window utama
    app_state.main_window = khatui_create_window(
        "{args.name.title()}",
        100, 100, WINDOW_WIDTH, WINDOW_HEIGHT,
        khat_get_current_app_id()
    )

    if (app_state.main_window < 0) {{
        return -1
    }}

    // Render window
    khatui_clear_window(app_state.main_window)
    khatui_draw_text(app_state.main_window, 50, 50,
                     "Selamat datang di {args.name.title()}!")

    return 0
}}

// Entry point aplikasi
fungsi main() -> int {{
    if (app_init() != 0) {{
        return -1
    }}

    // Main event loop
    while (app_state.is_running) {{
        var event = khatui_get_next_event()
        if (event.type == "quit") {{
            app_state.is_running = false
            break
        }}
        khat_sleep(16)
    }}

    return 0
}}'''

        main_path = project_dir / f"{args.name}.khat"
        with open(main_path, 'w', encoding='utf-8') as f:
            f.write(main_khat)
        print_success(f"{args.name}.khat dibuat")

        print()
        print_success(f"Project '{args.name}' berhasil diinisialisasi!")
        print_info("Langkah selanjutnya:")
        print(f"  cd {args.name}")
        print("  khatsdk build")

        return 0

    except Exception as e:
        print_error(f"Gagal membuat project: {e}")
        if project_dir.exists():
            shutil.rmtree(project_dir)
        return 1

def cmd_build(args):
    """Command: khatsdk build"""
    print_header()
    print_info("Building aplikasi .khapp...")

    # Cek apakah manifest.json ada
    if not Path("manifest.json").exists():
        print_error("manifest.json tidak ditemukan")
        return 1

    try:
        # Load manifest
        with open("manifest.json", 'r', encoding='utf-8') as f:
            manifest = json.load(f)

        app_name = manifest.get('name', 'unknown')
        print_info(f"Building: {app_name}")

        # Gunakan khapp_builder.py
        builder_path = Path(__file__).parent / "khapp_builder.py"
        if not builder_path.exists():
            print_error("khapp_builder.py tidak ditemukan")
            return 1

        # Build command
        output_file = args.output or f"{app_name.lower().replace(' ', '_')}.khapp"
        cmd = [sys.executable, str(builder_path), ".", "-o", output_file]

        # Execute build
        result = subprocess.run(cmd, capture_output=True, text=True)

        if result.returncode == 0:
            print_success(f"Build berhasil: {output_file}")
            if Path(output_file).exists():
                size = Path(output_file).stat().st_size
                print_info(f"Ukuran file: {size:,} bytes")
            return 0
        else:
            print_error("Build gagal")
            if result.stderr:
                print(result.stderr)
            return 1

    except Exception as e:
        print_error(f"Error saat building: {e}")
        return 1

def main():
    """Main function"""
    parser = argparse.ArgumentParser(
        description="Khatulistiwa OS SDK - Tools pengembangan aplikasi .khapp"
    )

    subparsers = parser.add_subparsers(dest='command', help='Commands')

    # Command: init
    parser_init = subparsers.add_parser('init', help='Inisialisasi project baru')
    parser_init.add_argument('name', help='Nama project')
    parser_init.add_argument('--author', default='Developer', help='Nama author')

    # Command: build
    parser_build = subparsers.add_parser('build', help='Build aplikasi .khapp')
    parser_build.add_argument('--output', '-o', help='Output file .khapp')

    args = parser.parse_args()

    if not args.command:
        parser.print_help()
        return 1

    # Execute command
    if args.command == 'init':
        return cmd_init(args)
    elif args.command == 'build':
        return cmd_build(args)
    else:
        print_error(f"Command '{args.command}' tidak dikenal")
        return 1

if __name__ == '__main__':
    sys.exit(main())