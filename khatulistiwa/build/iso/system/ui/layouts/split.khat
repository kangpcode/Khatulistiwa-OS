/*
 * ============================================================================
 * split.khat - Layout Split-Screen dengan Tema Wayang Khatulistiwa OS
 * Copyright (c) 2025 Dhafa Nazula Permadi & Team BIGCode By Cv Bintang Gumilang Group
 * ============================================================================
 * 
 * Split layout engine dengan fitur:
 * 1. Split horizontal (kiri-kanan) dengan tema wayang kulit
 * 2. Split vertical (atas-bawah) dengan tema wayang golek
 * 3. Dynamic resizing dengan ornamen pemisah batik
 * 4. Smooth transitions dengan animasi tradisional
 * 5. Cultural snap indicators dengan motif Indonesia
 */

import "khatcore/system.khat"
import "khatui/runtime.khat"
import "khatui/cultural.khat"
import "khatui/animations.khat"

// Konstanta split layout
konstan SPLIT_VERSION = "1.0.0"
konstan MIN_SPLIT_SIZE = 200
konstan SPLITTER_WIDTH = 8
konstan SNAP_THRESHOLD = 15
konstan ANIMATION_DURATION = 300

// Tipe split
enum SplitType {
    HORIZONTAL = 0,    // Kiri-kanan (wayang kulit)
    VERTICAL = 1       // Atas-bawah (wayang golek)
}

// Orientasi split
enum SplitOrientation {
    LEFT_RIGHT = 0,
    TOP_BOTTOM = 1,
    MASTER_DETAIL = 2,
    PICTURE_IN_PICTURE = 3
}

// Struktur split container
struct SplitContainer {
    id: int,
    type: SplitType,
    orientation: SplitOrientation,
    x: int,
    y: int,
    width: int,
    height: int,
    split_ratio: float,
    min_ratio: float,
    max_ratio: float,
    primary_window: int,
    secondary_window: int,
    splitter_x: int,
    splitter_y: int,
    splitter_width: int,
    splitter_height: int,
    is_resizing: bool,
    cultural_theme: string,
    wayang_style: string,
    ornament_pattern: string,
    animation_progress: float,
    last_update: time_t
}

// State split layout
struct SplitLayoutState {
    containers: SplitContainer[],
    container_count: int,
    active_container: int,
    screen_width: int,
    screen_height: int,
    cultural_mode: bool,
    animation_enabled: bool,
    resize_in_progress: bool,
    resize_start_x: int,
    resize_start_y: int,
    resize_start_ratio: float
}

// Global state
var split_layout: SplitLayoutState

// Inisialisasi split layout
fungsi split_init() -> int {
    khat_log("[SPLIT] Menginisialisasi Split Layout v" + SPLIT_VERSION)
    
    // Setup state awal
    split_layout.container_count = 0
    split_layout.active_container = -1
    split_layout.screen_width = khat_screen_width()
    split_layout.screen_height = khat_screen_height()
    split_layout.cultural_mode = true
    split_layout.animation_enabled = true
    split_layout.resize_in_progress = false
    
    // Initialize cultural themes
    init_wayang_themes()
    
    khat_log("[SPLIT] Split Layout berhasil diinisialisasi!")
    return 0
}

// Buat split container baru
fungsi split_create_container(type: SplitType, primary_window: int, 
                             secondary_window: int, x: int, y: int, 
                             width: int, height: int) -> int {
    if (split_layout.container_count >= 16) {
        khat_log("[SPLIT] Maximum containers reached")
        return -1
    }
    
    var container_id = split_layout.container_count
    var container: SplitContainer
    
    // Setup container properties
    container.id = container_id
    container.type = type
    container.orientation = (type == HORIZONTAL) ? LEFT_RIGHT : TOP_BOTTOM
    container.x = x
    container.y = y
    container.width = width
    container.height = height
    container.split_ratio = 0.5  // 50-50 split default
    container.min_ratio = 0.2    // Minimum 20%
    container.max_ratio = 0.8    // Maximum 80%
    container.primary_window = primary_window
    container.secondary_window = secondary_window
    container.is_resizing = false
    container.cultural_theme = get_wayang_theme(type)
    container.wayang_style = get_wayang_style(type)
    container.ornament_pattern = get_ornament_pattern(type)
    container.animation_progress = 0.0
    container.last_update = khat_get_current_time()
    
    // Calculate splitter position
    calculate_splitter_position(&container)
    
    // Tambah ke daftar containers
    split_layout.containers[container_id] = container
    split_layout.container_count++
    split_layout.active_container = container_id
    
    // Arrange windows dalam container
    arrange_split_windows(container_id)
    
    // Start animation jika enabled
    if (split_layout.animation_enabled) {
        start_split_animation(container_id)
    }
    
    khat_log("[SPLIT] Split container created (ID: " + khat_int_to_string(container_id) + ")")
    return container_id
}

// Calculate posisi splitter
fungsi calculate_splitter_position(container: SplitContainer*) -> void {
    if (container->type == HORIZONTAL) {
        // Split kiri-kanan
        container->splitter_x = container->x + (int)(container->width * container->split_ratio) - SPLITTER_WIDTH / 2
        container->splitter_y = container->y
        container->splitter_width = SPLITTER_WIDTH
        container->splitter_height = container->height
    } else {
        // Split atas-bawah
        container->splitter_x = container->x
        container->splitter_y = container->y + (int)(container->height * container->split_ratio) - SPLITTER_WIDTH / 2
        container->splitter_width = container->width
        container->splitter_height = SPLITTER_WIDTH
    }
}

// Arrange windows dalam split container
fungsi arrange_split_windows(container_id: int) -> void {
    if (container_id < 0 || container_id >= split_layout.container_count) {
        return
    }
    
    var container = &split_layout.containers[container_id]
    
    if (container->type == HORIZONTAL) {
        arrange_horizontal_split(container)
    } else {
        arrange_vertical_split(container)
    }
}

// Arrange horizontal split (kiri-kanan)
fungsi arrange_horizontal_split(container: SplitContainer*) -> void {
    var left_width = (int)(container->width * container->split_ratio) - SPLITTER_WIDTH / 2
    var right_width = container->width - left_width - SPLITTER_WIDTH
    
    // Primary window (kiri)
    if (container->primary_window >= 0) {
        wm_move_window(container->primary_window, container->x, container->y)
        wm_resize_window(container->primary_window, left_width, container->height)
    }
    
    // Secondary window (kanan)
    if (container->secondary_window >= 0) {
        var right_x = container->x + left_width + SPLITTER_WIDTH
        wm_move_window(container->secondary_window, right_x, container->y)
        wm_resize_window(container->secondary_window, right_width, container->height)
    }
}

// Arrange vertical split (atas-bawah)
fungsi arrange_vertical_split(container: SplitContainer*) -> void {
    var top_height = (int)(container->height * container->split_ratio) - SPLITTER_WIDTH / 2
    var bottom_height = container->height - top_height - SPLITTER_WIDTH
    
    // Primary window (atas)
    if (container->primary_window >= 0) {
        wm_move_window(container->primary_window, container->x, container->y)
        wm_resize_window(container->primary_window, container->width, top_height)
    }
    
    // Secondary window (bawah)
    if (container->secondary_window >= 0) {
        var bottom_y = container->y + top_height + SPLITTER_WIDTH
        wm_move_window(container->secondary_window, container->x, bottom_y)
        wm_resize_window(container->secondary_window, container->width, bottom_height)
    }
}

// Render split container
fungsi split_render_container(container_id: int) -> void {
    if (container_id < 0 || container_id >= split_layout.container_count) {
        return
    }
    
    var container = &split_layout.containers[container_id]
    
    // Render splitter dengan ornamen wayang
    render_cultural_splitter(container)
    
    // Render snap indicators jika sedang resize
    if (container->is_resizing) {
        render_snap_indicators(container)
    }
    
    // Render animation overlay jika ada
    if (container->animation_progress > 0.0) {
        render_split_animation(container)
    }
}

// Render splitter dengan ornamen budaya
fungsi render_cultural_splitter(container: SplitContainer*) -> void {
    var splitter_color = get_cultural_color("splitter_bg")
    var ornament_color = get_cultural_color("splitter_ornament")
    
    // Background splitter
    khatui_fill_rect(0, container->splitter_x, container->splitter_y,
                     container->splitter_width, container->splitter_height,
                     splitter_color)
    
    // Ornamen wayang pada splitter
    if (container->type == HORIZONTAL) {
        // Ornamen vertikal untuk split horizontal
        draw_vertical_wayang_ornament(container->splitter_x, container->splitter_y,
                                      container->splitter_width, container->splitter_height,
                                      container->wayang_style, ornament_color)
    } else {
        // Ornamen horizontal untuk split vertical
        draw_horizontal_wayang_ornament(container->splitter_x, container->splitter_y,
                                        container->splitter_width, container->splitter_height,
                                        container->wayang_style, ornament_color)
    }
    
    // Grip handle dengan motif batik
    draw_splitter_grip(container)
}

// Gambar grip handle splitter
fungsi draw_splitter_grip(container: SplitContainer*) -> void {
    var grip_color = get_cultural_color("splitter_grip")
    var grip_size = 20
    
    if (container->type == HORIZONTAL) {
        // Grip vertikal
        var grip_x = container->splitter_x + (container->splitter_width - 4) / 2
        var grip_y = container->splitter_y + (container->splitter_height - grip_size) / 2
        
        // Tiga garis vertikal dengan motif
        for (var i = 0; i < 3; i++) {
            khatui_fill_rect(0, grip_x + i * 2, grip_y, 1, grip_size, grip_color)
        }
        
        // Ornamen batik kecil
        khatui_draw_cultural_icon(0, grip_x - 8, grip_y + grip_size / 2 - 8,
                                  16, 16, "grip_ornament", grip_color)
    } else {
        // Grip horizontal
        var grip_x = container->splitter_x + (container->splitter_width - grip_size) / 2
        var grip_y = container->splitter_y + (container->splitter_height - 4) / 2
        
        // Tiga garis horizontal dengan motif
        for (var i = 0; i < 3; i++) {
            khatui_fill_rect(0, grip_x, grip_y + i * 2, grip_size, 1, grip_color)
        }
        
        // Ornamen batik kecil
        khatui_draw_cultural_icon(0, grip_x + grip_size / 2 - 8, grip_y - 8,
                                  16, 16, "grip_ornament", grip_color)
    }
}

// Handle mouse drag untuk resize
fungsi split_handle_mouse_drag(container_id: int, mouse_x: int, mouse_y: int) -> void {
    if (container_id < 0 || container_id >= split_layout.container_count) {
        return
    }
    
    var container = &split_layout.containers[container_id]
    
    if (!container->is_resizing) {
        return
    }
    
    var new_ratio: float
    
    if (container->type == HORIZONTAL) {
        // Calculate new ratio berdasarkan posisi mouse X
        var relative_x = mouse_x - container->x
        new_ratio = (float)relative_x / container->width
    } else {
        // Calculate new ratio berdasarkan posisi mouse Y
        var relative_y = mouse_y - container->y
        new_ratio = (float)relative_y / container->height
    }
    
    // Clamp ratio dalam batas yang valid
    if (new_ratio < container->min_ratio) {
        new_ratio = container->min_ratio
    }
    if (new_ratio > container->max_ratio) {
        new_ratio = container->max_ratio
    }
    
    // Snap ke 50% jika dekat
    if (abs(new_ratio - 0.5) < 0.05) {
        new_ratio = 0.5
        
        // Play snap sound
        play_cultural_snap_sound()
    }
    
    // Update ratio dan arrange ulang
    container->split_ratio = new_ratio
    calculate_splitter_position(container)
    arrange_split_windows(container_id)
    
    // Update timestamp
    container->last_update = khat_get_current_time()
}

// Start resize operation
fungsi split_start_resize(container_id: int, mouse_x: int, mouse_y: int) -> int {
    if (container_id < 0 || container_id >= split_layout.container_count) {
        return -1
    }
    
    var container = &split_layout.containers[container_id]
    
    // Check apakah mouse di area splitter
    if (!is_mouse_on_splitter(container, mouse_x, mouse_y)) {
        return -1
    }
    
    container->is_resizing = true
    split_layout.resize_in_progress = true
    split_layout.resize_start_x = mouse_x
    split_layout.resize_start_y = mouse_y
    split_layout.resize_start_ratio = container->split_ratio
    
    // Change cursor ke resize
    if (container->type == HORIZONTAL) {
        khatui_set_cursor("resize_horizontal")
    } else {
        khatui_set_cursor("resize_vertical")
    }
    
    return 0
}

// Stop resize operation
fungsi split_stop_resize(container_id: int) -> void {
    if (container_id < 0 || container_id >= split_layout.container_count) {
        return
    }
    
    var container = &split_layout.containers[container_id]
    
    container->is_resizing = false
    split_layout.resize_in_progress = false
    
    // Restore cursor
    khatui_set_cursor("default")
    
    // Play completion sound
    play_cultural_resize_complete_sound()
}

// Check apakah mouse di area splitter
fungsi is_mouse_on_splitter(container: SplitContainer*, mouse_x: int, mouse_y: int) -> bool {
    return (mouse_x >= container->splitter_x && 
            mouse_x <= container->splitter_x + container->splitter_width &&
            mouse_y >= container->splitter_y && 
            mouse_y <= container->splitter_y + container->splitter_height)
}

// Animate split creation
fungsi start_split_animation(container_id: int) -> void {
    if (container_id < 0 || container_id >= split_layout.container_count) {
        return
    }
    
    var container = &split_layout.containers[container_id]
    container->animation_progress = 0.0
    
    // Start animation dengan tema wayang
    khatui_start_cultural_animation("split_creation", ANIMATION_DURATION,
                                    container->wayang_style)
}

// Update animation progress
fungsi update_split_animations() -> void {
    for (var i = 0; i < split_layout.container_count; i++) {
        var container = &split_layout.containers[i]
        
        if (container->animation_progress < 1.0) {
            container->animation_progress += 0.02  // 2% per frame
            
            if (container->animation_progress >= 1.0) {
                container->animation_progress = 1.0
                // Animation complete
            }
        }
    }
}

// API untuk WindowManager
fungsi split_get_container_count() -> int {
    return split_layout.container_count
}

fungsi split_destroy_container(container_id: int) -> int {
    if (container_id < 0 || container_id >= split_layout.container_count) {
        return -1
    }
    
    // Animate destruction
    if (split_layout.animation_enabled) {
        start_split_destruction_animation(container_id)
    }
    
    // Remove container (simplified - in real implementation would compact array)
    split_layout.containers[container_id].id = -1
    
    return 0
}

// Entry point untuk testing
fungsi main() -> int {
    if (split_init() != 0) {
        return -1
    }
    
    khat_log("[SPLIT] Split Layout ready for testing")
    return 0
}
