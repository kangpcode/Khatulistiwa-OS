/*
 * ============================================================================
 * khatcalendar.khat - Kalender Terpadu Khatulistiwa OS dengan Sistem Tradisional
 * Copyright (c) 2025 Dhafa Nazula Permadi & Team BIGCode By Cv Bintang Gumilang Group
 * ============================================================================
 * 
 * Kalender lengkap dengan fitur:
 * 1. Kalender Masehi, Jawa, Hijriah, dan Bali
 * 2. Hari raya dan perayaan Indonesia
 * 3. Sistem penanggalan tradisional
 * 4. Event scheduling dengan tema budaya
 * 5. Pengingat dengan suara gamelan
 */

import "khatui/runtime.khat"
import "khatcore/system.khat"
import "khatcore/time.khat"
import "khatcultural/calendar.khat"
import "khatui/cultural.khat"
import "khatnotif/reminder.khat"

// Konstanta aplikasi
konstan CALENDAR_VERSION = "1.0.0"
konstan WINDOW_WIDTH = 1000
konstan WINDOW_HEIGHT = 700
konstan SIDEBAR_WIDTH = 250
konstan HEADER_HEIGHT = 80
konstan CALENDAR_GRID_SIZE = 42 // 6 weeks x 7 days

// Sistem kalender
enum CalendarSystem {
    GREGORIAN = 0,
    JAVANESE = 1,
    HIJRI = 2,
    BALINESE = 3
}

// Mode tampilan
enum ViewMode {
    MONTH = 0,
    WEEK = 1,
    DAY = 2,
    YEAR = 3,
    TRADITIONAL = 4
}

// Tipe event
enum EventType {
    PERSONAL = 0,
    WORK = 1,
    FAMILY = 2,
    CULTURAL = 3,
    RELIGIOUS = 4,
    NATIONAL = 5
}

// Struktur tanggal tradisional
struct TraditionalDate {
    gregorian: Date,
    javanese: JavaneseDate,
    hijri: HijriDate,
    balinese: BalineseDate,
    lunar_phase: LunarPhase,
    season: Season
}

// Tanggal Jawa
struct JavaneseDate {
    year: int,
    month: int,
    day: int,
    wuku: string,
    pasaran: string,
    neptu: int
}

// Tanggal Hijriah
struct HijriDate {
    year: int,
    month: int,
    day: int,
    month_name: string
}

// Tanggal Bali
struct BalineseDate {
    year: int,
    sasih: int,
    day: int,
    wuku: string,
    pawukon: string
}

// Event kalender
struct CalendarEvent {
    id: string,
    title: string,
    description: string,
    start_time: time_t,
    end_time: time_t,
    type: EventType,
    location: string,
    reminder_time: time_t,
    is_recurring: bool,
    recurrence_pattern: string,
    cultural_significance: string,
    traditional_date: TraditionalDate,
    participants: string[],
    cultural_icon: string,
    color: string
}

// State aplikasi
struct CalendarState {
    current_view: ViewMode,
    current_date: Date,
    selected_date: Date,
    calendar_system: CalendarSystem,
    events: CalendarEvent[],
    event_count: int,
    show_traditional: bool,
    show_holidays: bool,
    cultural_mode: bool,
    batik_theme: string,
    main_window: int,
    event_window: int,
    sidebar_collapsed: bool
}

// Global state
var calendar: CalendarState
var indonesian_holidays: CalendarEvent[100]
var traditional_events: CalendarEvent[200]

// Inisialisasi aplikasi
fungsi calendar_init() -> int {
    khat_log("[CALENDAR] Menginisialisasi KhatCalendar v" + CALENDAR_VERSION)
    
    // Setup state awal
    calendar.current_view = MONTH
    calendar.current_date = khat_get_current_date()
    calendar.selected_date = calendar.current_date
    calendar.calendar_system = GREGORIAN
    calendar.event_count = 0
    calendar.show_traditional = true
    calendar.show_holidays = true
    calendar.cultural_mode = true
    calendar.batik_theme = "sido_mukti"
    calendar.sidebar_collapsed = false
    
    // Buat window utama
    if (create_main_window() != 0) {
        khat_log("[ERROR] Gagal membuat window utama")
        return -1
    }
    
    // Load data hari raya Indonesia
    if (load_indonesian_holidays() != 0) {
        khat_log("[WARNING] Gagal memuat data hari raya Indonesia")
    }
    
    // Load event tradisional
    if (load_traditional_events() != 0) {
        khat_log("[WARNING] Gagal memuat event tradisional")
    }
    
    // Load event pengguna
    if (load_user_events() != 0) {
        khat_log("[WARNING] Gagal memuat event pengguna")
    }
    
    // Setup event handlers
    setup_calendar_events()
    
    khat_log("[CALENDAR] KhatCalendar berhasil diinisialisasi!")
    return 0
}

// Buat window utama
fungsi create_main_window() -> int {
    khat_log("[CALENDAR] Membuat window utama...")
    
    calendar.main_window = khatui_create_window(
        "KhatCalendar - Kalender Nusantara",
        (khat_screen_width() - WINDOW_WIDTH) / 2,
        (khat_screen_height() - WINDOW_HEIGHT) / 2,
        WINDOW_WIDTH, WINDOW_HEIGHT,
        khat_get_current_app_id()
    )
    
    if (calendar.main_window < 0) {
        return -1
    }
    
    // Set window properties
    khatui_set_window_cultural_theme(calendar.main_window, calendar.batik_theme)
    khatui_set_window_resizable(calendar.main_window, true)
    khatui_set_window_min_size(calendar.main_window, 800, 600)
    
    // Render window
    render_calendar_window()
    
    return 0
}

// Render window kalender
fungsi render_calendar_window() -> void {
    // Clear window
    khatui_clear_window(calendar.main_window)
    
    // Background dengan motif batik
    draw_cultural_background()
    
    // Header dengan navigasi dan info
    draw_calendar_header()
    
    // Sidebar dengan mini kalender dan event
    if (!calendar.sidebar_collapsed) {
        draw_calendar_sidebar()
    }
    
    // Area kalender utama
    draw_main_calendar_area()
    
    // Status bar dengan info tradisional
    draw_calendar_statusbar()
}

// Gambar background dengan motif budaya
fungsi draw_cultural_background() -> void {
    var bg_color = get_cultural_color("calendar_bg")
    var pattern_color = get_cultural_color("batik_subtle")
    
    // Background dasar
    khatui_fill_rect(calendar.main_window, 0, 0, 
                     WINDOW_WIDTH, WINDOW_HEIGHT, bg_color)
    
    // Overlay motif batik halus
    khatui_draw_batik_pattern(calendar.main_window,
                              0, 0, WINDOW_WIDTH, WINDOW_HEIGHT,
                              calendar.batik_theme, pattern_color, 0.03)
    
    // Border ornamen kalender
    khatui_draw_cultural_border(calendar.main_window,
                                0, 0, WINDOW_WIDTH, WINDOW_HEIGHT,
                                "ornamen_kalender")
}

// Gambar header kalender
fungsi draw_calendar_header() -> void {
    var header_color = get_cultural_color("calendar_header_bg")
    
    // Background header dengan gradien
    khatui_draw_gradient_rect(calendar.main_window, 0, 0, 
                              WINDOW_WIDTH, HEADER_HEIGHT,
                              header_color, get_cultural_color("calendar_header_gradient"))
    
    // Logo kalender dengan ornamen candi
    khatui_draw_cultural_icon(calendar.main_window, 20, 20, 40, 40,
                              "candi_kalender", get_cultural_color("header_icon"))
    
    // Judul dengan font tradisional
    khatui_draw_text_cultural(calendar.main_window, 75, 25,
                              "KhatCalendar", get_cultural_color("calendar_title"),
                              "calendar_title")
    
    // Info bulan dan tahun
    draw_month_year_display(300, 15, 300, 50)
    
    // Navigasi bulan
    draw_month_navigation(650, 20, 200, 40)
    
    // Toggle view mode
    draw_view_mode_toggle(870, 20, 100, 40)
}

// Gambar tampilan bulan dan tahun
fungsi draw_month_year_display(x: int, y: int, width: int, height: int) -> void {
    // Background dengan ornamen
    var display_bg = get_cultural_color("month_display_bg")
    khatui_draw_rounded_rect(calendar.main_window, x, y, width, height, 8, display_bg)
    
    // Nama bulan dalam bahasa Indonesia
    var month_name = get_indonesian_month_name(calendar.current_date.month)
    khatui_draw_text_cultural(calendar.main_window, x + 20, y + 10,
                              month_name, get_cultural_color("month_text"),
                              "month_display")
    
    // Tahun
    var year_text = khat_int_to_string(calendar.current_date.year)
    khatui_draw_text_cultural(calendar.main_window, x + 150, y + 10,
                              year_text, get_cultural_color("year_text"),
                              "year_display")
    
    // Info kalender tradisional
    if (calendar.show_traditional) {
        var traditional_info = get_traditional_date_info(calendar.current_date)
        khatui_draw_text_cultural(calendar.main_window, x + 20, y + 30,
                                  traditional_info, get_cultural_color("traditional_text"),
                                  "traditional_info")
    }
}

// Gambar navigasi bulan
fungsi draw_month_navigation(x: int, y: int, width: int, height: int) -> void {
    var button_width = 40
    var button_height = 30
    var button_spacing = 10
    
    // Tombol bulan sebelumnya
    khatui_draw_cultural_button(calendar.main_window, x, y + 5,
                                button_width, button_height,
                                "◀", "nav_button", "month_prev")
    
    // Tombol hari ini
    khatui_draw_cultural_button(calendar.main_window, x + button_width + button_spacing, y + 5,
                                width - 2 * (button_width + button_spacing), button_height,
                                "Hari Ini", "today_button", "go_today")
    
    // Tombol bulan berikutnya
    khatui_draw_cultural_button(calendar.main_window, x + width - button_width, y + 5,
                                button_width, button_height,
                                "▶", "nav_button", "month_next")
}

// Gambar area kalender utama
fungsi draw_main_calendar_area() -> void {
    var calendar_x = calendar.sidebar_collapsed ? 20 : SIDEBAR_WIDTH + 20
    var calendar_y = HEADER_HEIGHT + 20
    var calendar_width = WINDOW_WIDTH - calendar_x - 20
    var calendar_height = WINDOW_HEIGHT - calendar_y - 50
    
    switch (calendar.current_view) {
        case MONTH:
            draw_month_view(calendar_x, calendar_y, calendar_width, calendar_height)
            break
        case WEEK:
            draw_week_view(calendar_x, calendar_y, calendar_width, calendar_height)
            break
        case DAY:
            draw_day_view(calendar_x, calendar_y, calendar_width, calendar_height)
            break
        case YEAR:
            draw_year_view(calendar_x, calendar_y, calendar_width, calendar_height)
            break
        case TRADITIONAL:
            draw_traditional_view(calendar_x, calendar_y, calendar_width, calendar_height)
            break
    }
}

// Gambar tampilan bulan
fungsi draw_month_view(x: int, y: int, width: int, height: int) -> void {
    var grid_width = width
    var grid_height = height - 40
    var cell_width = grid_width / 7
    var cell_height = grid_height / 6
    
    // Header hari dalam seminggu
    draw_weekday_header(x, y, grid_width, 30)
    
    // Grid kalender
    draw_calendar_grid(x, y + 40, grid_width, grid_height, cell_width, cell_height)
}

// Gambar header hari dalam seminggu
fungsi draw_weekday_header(x: int, y: int, width: int, height: int) -> void {
    var weekdays = ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"]
    var cell_width = width / 7
    
    for (var i = 0; i < 7; i++) {
        var cell_x = x + i * cell_width
        
        // Background header
        var header_bg = get_cultural_color("weekday_header_bg")
        khatui_fill_rect(calendar.main_window, cell_x, y, cell_width, height, header_bg)
        
        // Nama hari
        khatui_draw_text_cultural(calendar.main_window, cell_x + cell_width/2 - 30, y + 8,
                                  weekdays[i], get_cultural_color("weekday_text"),
                                  "weekday_header")
        
        // Border
        khatui_draw_line(calendar.main_window, cell_x + cell_width, y,
                         cell_x + cell_width, y + height,
                         get_cultural_color("grid_border"))
    }
}

// Gambar grid kalender
fungsi draw_calendar_grid(x: int, y: int, width: int, height: int, 
                         cell_width: int, cell_height: int) -> void {
    var first_day = get_first_day_of_month(calendar.current_date)
    var days_in_month = get_days_in_month(calendar.current_date)
    var current_day = 1
    
    for (var week = 0; week < 6; week++) {
        for (var day = 0; day < 7; day++) {
            var cell_x = x + day * cell_width
            var cell_y = y + week * cell_height
            
            // Tentukan tanggal untuk cell ini
            var cell_date = calculate_cell_date(week, day, first_day, current_day, days_in_month)
            
            // Gambar cell
            draw_calendar_cell(cell_x, cell_y, cell_width, cell_height, cell_date)
            
            if (week == 0 && day >= first_day) {
                current_day++
            } else if (week > 0 && current_day <= days_in_month) {
                current_day++
            }
        }
    }
}

// Gambar cell kalender individual
fungsi draw_calendar_cell(x: int, y: int, width: int, height: int, date: Date) -> void {
    var is_today = is_same_date(date, khat_get_current_date())
    var is_selected = is_same_date(date, calendar.selected_date)
    var is_current_month = (date.month == calendar.current_date.month)
    
    // Background cell
    var cell_bg = get_cell_background_color(is_today, is_selected, is_current_month)
    khatui_fill_rect(calendar.main_window, x, y, width, height, cell_bg)
    
    // Border cell
    khatui_draw_rect(calendar.main_window, x, y, width, height,
                     get_cultural_color("cell_border"))
    
    // Nomor tanggal
    var date_color = get_date_text_color(is_today, is_selected, is_current_month)
    khatui_draw_text_cultural(calendar.main_window, x + 5, y + 5,
                              khat_int_to_string(date.day), date_color,
                              "date_number")
    
    // Info tradisional
    if (calendar.show_traditional && is_current_month) {
        draw_traditional_date_info(x, y + 20, width, 15, date)
    }
    
    // Event indicators
    draw_event_indicators(x, y + height - 20, width, 15, date)
    
    // Hari raya indicator
    if (is_holiday(date)) {
        draw_holiday_indicator(x + width - 15, y + 5, 10, 10)
    }
    
    // Click handler
    khatui_add_click_handler(calendar.main_window, x, y, width, height,
                            "date_click", encode_date(date))
}

// Load hari raya Indonesia
fungsi load_indonesian_holidays() -> int {
    khat_log("[CALENDAR] Memuat data hari raya Indonesia...")
    
    // Hari raya nasional tetap
    add_holiday("Tahun Baru Masehi", make_date(calendar.current_date.year, 1, 1), NATIONAL)
    add_holiday("Hari Kemerdekaan RI", make_date(calendar.current_date.year, 8, 17), NATIONAL)
    add_holiday("Hari Kartini", make_date(calendar.current_date.year, 4, 21), NATIONAL)
    add_holiday("Hari Lahir Pancasila", make_date(calendar.current_date.year, 6, 1), NATIONAL)
    add_holiday("Hari Pendidikan Nasional", make_date(calendar.current_date.year, 5, 2), NATIONAL)
    
    // Hari raya keagamaan (perlu kalkulasi)
    calculate_religious_holidays(calendar.current_date.year)
    
    return 0
}

// Kalkulasi hari raya keagamaan
fungsi calculate_religious_holidays(year: int) -> void {
    // Idul Fitri (berdasarkan kalender Hijriah)
    var idul_fitri = calculate_hijri_holiday(year, "idul_fitri")
    add_holiday("Hari Raya Idul Fitri", idul_fitri, RELIGIOUS)
    
    // Idul Adha
    var idul_adha = calculate_hijri_holiday(year, "idul_adha")
    add_holiday("Hari Raya Idul Adha", idul_adha, RELIGIOUS)
    
    // Waisak
    var waisak = calculate_buddhist_holiday(year, "waisak")
    add_holiday("Hari Raya Waisak", waisak, RELIGIOUS)
    
    // Nyepi (berdasarkan kalender Bali)
    var nyepi = calculate_balinese_holiday(year, "nyepi")
    add_holiday("Hari Raya Nyepi", nyepi, RELIGIOUS)
}

// API untuk menambah event
fungsi khatcalendar_add_event(title: string, description: string, 
                             start_time: time_t, end_time: time_t,
                             type: EventType) -> int {
    if (calendar.event_count >= MAX_EVENTS) {
        return -1
    }
    
    var event: CalendarEvent
    event.id = generate_event_id()
    event.title = title
    event.description = description
    event.start_time = start_time
    event.end_time = end_time
    event.type = type
    event.is_recurring = false
    event.cultural_icon = get_event_type_icon(type)
    event.color = get_event_type_color(type)
    
    calendar.events[calendar.event_count] = event
    calendar.event_count++
    
    // Schedule reminder
    schedule_event_reminder(&event)
    
    // Refresh display
    render_calendar_window()
    
    return 0
}

// Entry point aplikasi
fungsi main() -> int {
    if (calendar_init() != 0) {
        return -1
    }
    
    // Main event loop
    while (true) {
        var event = khatui_get_next_event()
        if (event.type == "quit") {
            break
        }
        
        handle_calendar_event(event.type, event.data)
        
        khat_sleep(16)
    }
    
    // Cleanup
    calendar_cleanup()
    
    return 0
}
