/*
 * ============================================================================
 * khatcalc.khat - Kalkulator Sempoa Digital Khatulistiwa OS
 * Copyright (c) 2025 Dhafa Nazula Permadi & Team BIGCode By Cv Bintang Gumilang Group
 * ============================================================================
 * 
 * Kalkulator lengkap dengan fitur:
 * 1. Basic arithmetic dengan tema sempoa tradisional
 * 2. Scientific functions dengan ornamen matematika Jawa
 * 3. Unit converter dengan satuan tradisional Indonesia
 * 4. Memory operations dengan konsep ingatan budaya
 * 5. Cultural number systems dengan angka Jawa
 */

import "khatui/runtime.khat"
import "khatcore/system.khat"
import "khatcore/math.khat"
import "khatcore/memory.khat"
import "khatui/cultural.khat"
import "khatui/animations.khat"

// Konstanta aplikasi
konstan CALC_VERSION = "1.0.0"
konstan WINDOW_WIDTH = 400
konstan WINDOW_HEIGHT = 600
konstan BUTTON_SIZE = 60
konstan BUTTON_MARGIN = 5
konstan DISPLAY_HEIGHT = 80
konstan MAX_DIGITS = 15
konstan MAX_HISTORY = 100

// Mode kalkulator
enum CalculatorMode {
    BASIC = 0,
    SCIENTIFIC = 1,
    PROGRAMMER = 2,
    UNIT_CONVERTER = 3,
    CURRENCY = 4
}

// Operasi matematika
enum Operation {
    NONE = 0,
    ADD = 1,
    SUBTRACT = 2,
    MULTIPLY = 3,
    DIVIDE = 4,
    POWER = 5,
    ROOT = 6,
    MODULO = 7,
    EQUALS = 8
}

// State kalkulator
struct CalculatorState {
    current_mode: CalculatorMode,
    display_value: string,
    previous_value: double,
    current_value: double,
    current_operation: Operation,
    is_new_calculation: bool,
    is_decimal_entered: bool,
    memory_value: double,
    has_memory: bool,
    calculation_history: string[],
    history_count: int,
    error_state: bool,
    cultural_mode: bool,
    audio_enabled: bool,
    use_javanese_numerals: bool,
    batik_theme: string,
    sempoa_animation: bool,
    main_window: int,
    display_area: int,
    button_grid: int,
    memory_panel: int,
    history_panel: int,
    mode_selector: int
}

// Global state
var calc: CalculatorState

// Inisialisasi aplikasi
fungsi calc_init() -> int {
    khat_log("[CALC] Menginisialisasi KhatCalc v" + CALC_VERSION)
    
    // Setup state awal
    calc.current_mode = BASIC
    calc.display_value = "0"
    calc.previous_value = 0.0
    calc.current_value = 0.0
    calc.current_operation = NONE
    calc.is_new_calculation = true
    calc.is_decimal_entered = false
    calc.memory_value = 0.0
    calc.has_memory = false
    calc.history_count = 0
    calc.error_state = false
    calc.cultural_mode = true
    calc.audio_enabled = true
    calc.use_javanese_numerals = false
    calc.batik_theme = "parang_rusak"
    calc.sempoa_animation = true
    
    // Buat window utama
    if (create_main_window() != 0) {
        khat_log("[ERROR] Gagal membuat window utama")
        return -1
    }
    
    // Setup event handlers
    setup_calculator_events()
    
    // Initialize cultural themes
    init_sempoa_themes()
    
    khat_log("[CALC] KhatCalc berhasil diinisialisasi!")
    return 0
}

// Buat window utama
fungsi create_main_window() -> int {
    khat_log("[CALC] Membuat window utama...")
    
    calc.main_window = khatui_create_window(
        "KhatCalc - Sempoa Digital Nusantara",
        (khat_screen_width() - WINDOW_WIDTH) / 2,
        (khat_screen_height() - WINDOW_HEIGHT) / 2,
        WINDOW_WIDTH, WINDOW_HEIGHT,
        khat_get_current_app_id()
    )
    
    if (calc.main_window < 0) {
        return -1
    }
    
    // Set window properties
    khatui_set_window_cultural_theme(calc.main_window, calc.batik_theme)
    khatui_set_window_resizable(calc.main_window, false)
    
    // Render window
    render_calculator_window()
    
    return 0
}

// Render window kalkulator
fungsi render_calculator_window() -> void {
    // Clear window
    khatui_clear_window(calc.main_window)
    
    // Background dengan motif sempoa
    draw_sempoa_background()
    
    // Mode selector
    draw_mode_selector()
    
    // Display area
    draw_display_area()
    
    // Button grid berdasarkan mode
    draw_button_grid()
    
    // Memory panel
    draw_memory_panel()
    
    // History panel (jika diperlukan)
    if (calc.current_mode == SCIENTIFIC) {
        draw_history_panel()
    }
}

// Gambar background sempoa
fungsi draw_sempoa_background() -> void {
    var bg_color = get_cultural_color("calc_bg")
    var sempoa_color = get_cultural_color("sempoa_frame")
    
    // Background dasar
    khatui_fill_rect(calc.main_window, 0, 0, WINDOW_WIDTH, WINDOW_HEIGHT, bg_color)
    
    // Frame sempoa
    khatui_draw_rounded_rect(calc.main_window, 10, 10, 
                             WINDOW_WIDTH - 20, WINDOW_HEIGHT - 20, 
                             15, sempoa_color)
    
    // Ornamen batik pada frame
    khatui_draw_cultural_border(calc.main_window, 10, 10, 
                                WINDOW_WIDTH - 20, WINDOW_HEIGHT - 20,
                                "ornamen_sempoa")
}

// Gambar mode selector
fungsi draw_mode_selector() -> void {
    var selector_y = 20
    var selector_height = 40
    var button_width = 70
    var start_x = 20
    
    var modes = [
        {BASIC, "Dasar", "sempoa_dasar"},
        {SCIENTIFIC, "Ilmiah", "sempoa_ilmiah"},
        {UNIT_CONVERTER, "Satuan", "timbangan"},
        {CURRENCY, "Uang", "mata_uang"}
    ]
    
    for (var i = 0; i < modes.length; i++) {
        var mode = modes[i]
        var button_x = start_x + i * (button_width + 5)
        var is_active = (mode.id == calc.current_mode)
        
        // Background button
        var button_bg = is_active ?
                        get_cultural_color("mode_active") :
                        get_cultural_color("mode_normal")
        
        khatui_draw_rounded_rect(calc.main_window, button_x, selector_y,
                                button_width, selector_height, 8, button_bg)
        
        // Icon mode
        khatui_draw_cultural_icon(calc.main_window, button_x + 5, selector_y + 5,
                                  20, 20, mode.cultural_icon,
                                  get_cultural_color("mode_icon"))
        
        // Text mode
        var text_color = is_active ?
                         get_cultural_color("mode_active_text") :
                         get_cultural_color("mode_text")
        
        khatui_draw_text_cultural(calc.main_window, button_x + 30, selector_y + 15,
                                  mode.name, text_color, "mode_text")
        
        // Click handler
        khatui_add_click_handler(calc.main_window, button_x, selector_y,
                                button_width, selector_height, "mode_click", i)
    }
}

// Gambar display area
fungsi draw_display_area() -> void {
    var display_x = 20
    var display_y = 80
    var display_width = WINDOW_WIDTH - 40
    var display_bg = get_cultural_color("display_bg")
    var display_border = get_cultural_color("display_border")
    
    // Background display
    khatui_draw_rounded_rect(calc.main_window, display_x, display_y,
                             display_width, DISPLAY_HEIGHT, 10, display_bg)
    
    // Border display dengan ornamen
    khatui_draw_rounded_rect_border(calc.main_window, display_x, display_y,
                                    display_width, DISPLAY_HEIGHT, 10, 2, display_border)
    
    // Ornamen sudut display
    draw_display_ornaments(display_x, display_y, display_width, DISPLAY_HEIGHT)
    
    // Display value
    draw_display_value(display_x, display_y, display_width, DISPLAY_HEIGHT)
    
    // Memory indicator
    if (calc.has_memory) {
        draw_memory_indicator(display_x + display_width - 30, display_y + 5)
    }
}

// Gambar nilai display
fungsi draw_display_value(x: int, y: int, width: int, height: int) -> void {
    var display_text = calc.display_value
    
    // Convert ke angka Jawa jika diperlukan
    if (calc.use_javanese_numerals) {
        display_text = convert_to_javanese_numerals(display_text)
    }
    
    // Error state
    if (calc.error_state) {
        display_text = "Kesalahan"
        var error_color = get_cultural_color("error_text")
        khatui_draw_text_cultural(calc.main_window, x + 20, y + height / 2 - 10,
                                  display_text, error_color, "error_display")
        return
    }
    
    // Normal display
    var text_color = get_cultural_color("display_text")
    var font_size = calculate_display_font_size(display_text, width - 40)
    
    // Right-align text
    var text_width = khatui_get_text_width(display_text, font_size)
    var text_x = x + width - text_width - 20
    var text_y = y + height / 2 - font_size / 2
    
    khatui_draw_text_sized(calc.main_window, text_x, text_y,
                           display_text, text_color, font_size)
    
    // Sempoa visualization jika enabled
    if (calc.sempoa_animation && calc.current_mode == BASIC) {
        draw_sempoa_visualization(x, y + height + 5, width, 60)
    }
}

// Gambar button grid
fungsi draw_button_grid() -> void {
    var grid_start_y = 200
    
    switch (calc.current_mode) {
        case BASIC:
            draw_basic_buttons(grid_start_y)
            break
        case SCIENTIFIC:
            draw_scientific_buttons(grid_start_y)
            break
        case PROGRAMMER:
            draw_programmer_buttons(grid_start_y)
            break
        case UNIT_CONVERTER:
            draw_unit_converter_interface(grid_start_y)
            break
        case CURRENCY:
            draw_currency_interface(grid_start_y)
            break
    }
}

// Gambar tombol basic
fungsi draw_basic_buttons(start_y: int) -> void {
    var button_layout = [
        ["C", "CE", "⌫", "÷"],
        ["7", "8", "9", "×"],
        ["4", "5", "6", "-"],
        ["1", "2", "3", "+"],
        ["±", "0", ".", "="]
    ]
    
    var start_x = 30
    var row_count = 5
    var col_count = 4
    
    for (var row = 0; row < row_count; row++) {
        for (var col = 0; col < col_count; col++) {
            var button_text = button_layout[row][col]
            var button_x = start_x + col * (BUTTON_SIZE + BUTTON_MARGIN)
            var button_y = start_y + row * (BUTTON_SIZE + BUTTON_MARGIN)
            
            draw_calculator_button(button_x, button_y, BUTTON_SIZE, BUTTON_SIZE,
                                   button_text, get_button_type(button_text))
        }
    }
}

// Gambar tombol scientific
fungsi draw_scientific_buttons(start_y: int) -> void {
    var button_layout = [
        ["2nd", "π", "e", "C", "⌫"],
        ["x²", "1/x", "|x|", "exp", "mod"],
        ["√", "(", ")", "n!", "÷"],
        ["xʸ", "7", "8", "9", "×"],
        ["log", "4", "5", "6", "-"],
        ["ln", "1", "2", "3", "+"],
        ["sin", "±", "0", ".", "="]
    ]
    
    var start_x = 20
    var row_count = 7
    var col_count = 5
    var button_width = 65
    var button_height = 45
    
    for (var row = 0; row < row_count; row++) {
        for (var col = 0; col < col_count; col++) {
            var button_text = button_layout[row][col]
            var button_x = start_x + col * (button_width + 3)
            var button_y = start_y + row * (button_height + 3)
            
            draw_calculator_button(button_x, button_y, button_width, button_height,
                                   button_text, get_button_type(button_text))
        }
    }
}

// Gambar tombol kalkulator
fungsi draw_calculator_button(x: int, y: int, width: int, height: int, 
                             text: string, button_type: string) -> void {
    var button_bg = get_button_background_color(button_type)
    var button_border = get_cultural_color("button_border")
    var text_color = get_button_text_color(button_type)
    
    // Background button dengan batik pattern
    khatui_draw_rounded_rect(calc.main_window, x, y, width, height, 8, button_bg)
    
    // Border button
    khatui_draw_rounded_rect_border(calc.main_window, x, y, width, height, 8, 2, button_border)
    
    // Batik pattern pada button
    if (calc.cultural_mode) {
        draw_button_batik_pattern(x, y, width, height, button_type)
    }
    
    // Text button
    var font_size = calculate_button_font_size(text, width, height)
    var text_width = khatui_get_text_width(text, font_size)
    var text_x = x + (width - text_width) / 2
    var text_y = y + (height - font_size) / 2
    
    khatui_draw_text_sized(calc.main_window, text_x, text_y, text, text_color, font_size)
    
    // Click handler
    khatui_add_click_handler(calc.main_window, x, y, width, height, "button_click", text)
}

// Handle button click
fungsi handle_button_click(button_text: string) -> void {
    // Play button sound
    if (calc.audio_enabled) {
        play_button_sound(button_text)
    }
    
    // Button animation
    animate_button_press(button_text)
    
    // Process button
    if (is_number_button(button_text)) {
        handle_number_input(button_text)
    } else if (is_operation_button(button_text)) {
        handle_operation_input(button_text)
    } else if (is_function_button(button_text)) {
        handle_function_input(button_text)
    } else if (is_memory_button(button_text)) {
        handle_memory_operation(button_text)
    } else if (is_control_button(button_text)) {
        handle_control_input(button_text)
    }
    
    // Update display
    update_display()
    
    // Update sempoa visualization
    if (calc.sempoa_animation) {
        update_sempoa_visualization()
    }
}

// Handle number input
fungsi handle_number_input(number: string) -> void {
    if (calc.is_new_calculation || calc.display_value == "0") {
        calc.display_value = number
        calc.is_new_calculation = false
    } else {
        if (calc.display_value.length < MAX_DIGITS) {
            calc.display_value += number
        }
    }
    
    calc.current_value = khat_string_to_double(calc.display_value)
}

// Handle operation input
fungsi handle_operation_input(op: string) -> void {
    if (calc.current_operation != NONE && !calc.is_new_calculation) {
        // Perform pending calculation
        perform_calculation()
    }
    
    calc.previous_value = calc.current_value
    calc.current_operation = string_to_operation(op)
    calc.is_new_calculation = true
    calc.is_decimal_entered = false
}

// Perform calculation
fungsi perform_calculation() -> void {
    var result: double
    
    switch (calc.current_operation) {
        case ADD:
            result = calc.previous_value + calc.current_value
            break
        case SUBTRACT:
            result = calc.previous_value - calc.current_value
            break
        case MULTIPLY:
            result = calc.previous_value * calc.current_value
            break
        case DIVIDE:
            if (calc.current_value == 0.0) {
                set_error_state("Tidak dapat dibagi nol")
                return
            }
            result = calc.previous_value / calc.current_value
            break
        case POWER:
            result = khat_pow(calc.previous_value, calc.current_value)
            break
        case MODULO:
            if (calc.current_value == 0.0) {
                set_error_state("Tidak dapat modulo nol")
                return
            }
            result = khat_fmod(calc.previous_value, calc.current_value)
            break
        default:
            result = calc.current_value
            break
    }
    
    // Check for overflow/underflow
    if (khat_is_infinite(result) || khat_is_nan(result)) {
        set_error_state("Hasil terlalu besar")
        return
    }
    
    // Update values
    calc.current_value = result
    calc.display_value = format_result(result)
    calc.current_operation = NONE
    calc.is_new_calculation = true
    
    // Add to history
    add_to_history(calc.previous_value, calc.current_operation, calc.current_value, result)
    
    // Play calculation complete sound
    if (calc.audio_enabled) {
        play_cultural_sound("calculation_complete")
    }
}

// Handle memory operations
fungsi handle_memory_operation(mem_op: string) -> void {
    if (mem_op == "MC") {
        // Memory Clear
        calc.memory_value = 0.0
        calc.has_memory = false
    } else if (mem_op == "MR") {
        // Memory Recall
        calc.display_value = format_result(calc.memory_value)
        calc.current_value = calc.memory_value
        calc.is_new_calculation = true
    } else if (mem_op == "MS") {
        // Memory Store
        calc.memory_value = calc.current_value
        calc.has_memory = true
    } else if (mem_op == "M+") {
        // Memory Plus
        calc.memory_value += calc.current_value
        calc.has_memory = true
    } else if (mem_op == "M-") {
        // Memory Minus
        calc.memory_value -= calc.current_value
        calc.has_memory = true
    }
    
    // Play memory sound
    if (calc.audio_enabled) {
        play_cultural_sound("memory_operation")
    }
}

// Convert to Javanese numerals
fungsi convert_to_javanese_numerals(text: string) -> string {
    var javanese_digits = "꧐꧑꧒꧓꧔꧕꧖꧗꧘꧙"
    var result = ""
    
    for (var i = 0; i < text.length; i++) {
        var char = text[i]
        if (char >= '0' && char <= '9') {
            var digit = char - '0'
            result += javanese_digits[digit]
        } else {
            result += char
        }
    }
    
    return result
}

// Draw sempoa visualization
fungsi draw_sempoa_visualization(x: int, y: int, width: int, height: int) -> void {
    var sempoa_bg = get_cultural_color("sempoa_bg")
    var bead_color = get_cultural_color("sempoa_bead")
    var rod_color = get_cultural_color("sempoa_rod")
    
    // Background sempoa
    khatui_fill_rect(calc.main_window, x, y, width, height, sempoa_bg)
    
    // Draw rods
    var rod_count = 5
    var rod_spacing = width / (rod_count + 1)
    
    for (var i = 1; i <= rod_count; i++) {
        var rod_x = x + i * rod_spacing
        khatui_draw_line(calc.main_window, rod_x, y + 5, rod_x, y + height - 5, rod_color, 2)
    }
    
    // Draw beads representing current value
    draw_sempoa_beads(x, y, width, height, calc.current_value)
}

// Update display
fungsi update_display() -> void {
    // Render ulang display area
    draw_display_area()
}

// API untuk aplikasi lain
fungsi calc_get_current_value() -> double {
    return calc.current_value
}

fungsi calc_set_mode(mode: CalculatorMode) -> int {
    calc.current_mode = mode
    render_calculator_window()
    return 0
}

// Entry point aplikasi
fungsi main() -> int {
    if (calc_init() != 0) {
        return -1
    }
    
    // Main event loop
    while (true) {
        var event = khatui_get_next_event()
        if (event.type == "quit") {
            break
        }
        
        handle_calculator_event(event.type, event.data)
        
        // Update animations
        update_calculator_animations()
        
        khat_sleep(16)
    }
    
    // Cleanup
    calculator_cleanup()
    
    return 0
}
