/*
 * ============================================================================
 * store_database.khat - KhatStore Database Management
 * Copyright (c) 2025 Dhafa Nazula Permadi & Team BIGCode By Cv Bintang Gumilang Group
 * ============================================================================
 * 
 * Store Database dengan fitur:
 * 1. Application catalog management
 * 2. User reviews and ratings
 * 3. Download statistics
 * 4. Cultural compliance tracking
 * 5. Gotong royong sharing metrics
 * 6. Spiritual validation records
 */

using KhatCore.Database;
using KhatCore.Cultural;
using KhatCore.Security;

namespace KhatStore.Database {
    
    // Database schema for applications
    struct ApplicationRecord {
        string id;
        string name;
        string nameIndonesia;
        string version;
        string developer;
        string category;
        string description;
        string descriptionIndonesia;
        string[] screenshots;
        string iconPath;
        uint64 downloadCount;
        float averageRating;
        uint32 reviewCount;
        uint64 fileSize;
        string[] culturalTags;
        bool spirituallyApproved;
        bool gotongRoyongCompatible;
        string[] supportedPlatforms;
        string downloadUrl;
        string checksum;
        DateTime publishDate;
        DateTime lastUpdate;
        bool isActive;
        string submittedBy;
        DateTime submissionDate;
        string approvalStatus; // "pending", "approved", "rejected"
    }
    
    // User review record
    struct ReviewRecord {
        string id;
        string appId;
        string userId;
        string userName;
        float rating;
        string reviewText;
        string reviewTextIndonesia;
        DateTime reviewDate;
        uint32 helpfulVotes;
        bool isVerifiedPurchase;
        bool culturallyRelevant;
        string[] culturalAspects; // aspects user liked culturally
    }
    
    // Download statistics
    struct DownloadRecord {
        string id;
        string appId;
        string userId;
        DateTime downloadDate;
        string platform;
        string version;
        bool successful;
        string ipAddress;
        string location;
    }
    
    // Cultural compliance record
    struct CulturalComplianceRecord {
        string appId;
        DateTime validationDate;
        string validatorId;
        bool passed;
        string[] passedCriteria;
        string[] failedCriteria;
        string notes;
        int culturalScore; // 1-100
        string[] recommendedImprovements;
    }
    
    // Gotong royong sharing metrics
    struct GotongRoyongMetrics {
        string appId;
        uint64 totalShares;
        uint64 communityDownloads;
        float sharingRatio; // downloads vs shares
        string[] topSharingUsers;
        DateTime lastShared;
        uint64 communityContributions;
    }
    
    class StoreDatabase {
        private DatabaseConnection connection;
        private string databasePath;
        
        // Initialize database
        public bool initialize(string dbPath) {
            this.databasePath = dbPath;
            this.connection = new DatabaseConnection();
            
            if (!connection.connect(dbPath)) {
                return false;
            }
            
            return createTables();
        }
        
        // Create database tables
        private bool createTables() {
            string[] createQueries = [
                // Applications table
                `CREATE TABLE IF NOT EXISTS applications (
                    id TEXT PRIMARY KEY,
                    name TEXT NOT NULL,
                    name_indonesia TEXT NOT NULL,
                    version TEXT NOT NULL,
                    developer TEXT NOT NULL,
                    category TEXT NOT NULL,
                    description TEXT,
                    description_indonesia TEXT,
                    screenshots TEXT, -- JSON array
                    icon_path TEXT,
                    download_count INTEGER DEFAULT 0,
                    average_rating REAL DEFAULT 0.0,
                    review_count INTEGER DEFAULT 0,
                    file_size INTEGER,
                    cultural_tags TEXT, -- JSON array
                    spiritually_approved BOOLEAN DEFAULT FALSE,
                    gotong_royong_compatible BOOLEAN DEFAULT FALSE,
                    supported_platforms TEXT, -- JSON array
                    download_url TEXT,
                    checksum TEXT,
                    publish_date DATETIME,
                    last_update DATETIME,
                    is_active BOOLEAN DEFAULT TRUE,
                    submitted_by TEXT,
                    submission_date DATETIME,
                    approval_status TEXT DEFAULT 'pending'
                )`,
                
                // Reviews table
                `CREATE TABLE IF NOT EXISTS reviews (
                    id TEXT PRIMARY KEY,
                    app_id TEXT NOT NULL,
                    user_id TEXT NOT NULL,
                    user_name TEXT NOT NULL,
                    rating REAL NOT NULL,
                    review_text TEXT,
                    review_text_indonesia TEXT,
                    review_date DATETIME NOT NULL,
                    helpful_votes INTEGER DEFAULT 0,
                    is_verified_purchase BOOLEAN DEFAULT FALSE,
                    culturally_relevant BOOLEAN DEFAULT FALSE,
                    cultural_aspects TEXT, -- JSON array
                    FOREIGN KEY (app_id) REFERENCES applications (id)
                )`,
                
                // Downloads table
                `CREATE TABLE IF NOT EXISTS downloads (
                    id TEXT PRIMARY KEY,
                    app_id TEXT NOT NULL,
                    user_id TEXT,
                    download_date DATETIME NOT NULL,
                    platform TEXT,
                    version TEXT,
                    successful BOOLEAN DEFAULT TRUE,
                    ip_address TEXT,
                    location TEXT,
                    FOREIGN KEY (app_id) REFERENCES applications (id)
                )`,
                
                // Cultural compliance table
                `CREATE TABLE IF NOT EXISTS cultural_compliance (
                    app_id TEXT PRIMARY KEY,
                    validation_date DATETIME NOT NULL,
                    validator_id TEXT NOT NULL,
                    passed BOOLEAN NOT NULL,
                    passed_criteria TEXT, -- JSON array
                    failed_criteria TEXT, -- JSON array
                    notes TEXT,
                    cultural_score INTEGER,
                    recommended_improvements TEXT, -- JSON array
                    FOREIGN KEY (app_id) REFERENCES applications (id)
                )`,
                
                // Gotong royong metrics table
                `CREATE TABLE IF NOT EXISTS gotong_royong_metrics (
                    app_id TEXT PRIMARY KEY,
                    total_shares INTEGER DEFAULT 0,
                    community_downloads INTEGER DEFAULT 0,
                    sharing_ratio REAL DEFAULT 0.0,
                    top_sharing_users TEXT, -- JSON array
                    last_shared DATETIME,
                    community_contributions INTEGER DEFAULT 0,
                    FOREIGN KEY (app_id) REFERENCES applications (id)
                )`
            ];
            
            foreach (query in createQueries) {
                if (!connection.execute(query)) {
                    return false;
                }
            }
            
            return createIndexes();
        }
        
        // Create database indexes for performance
        private bool createIndexes() {
            string[] indexQueries = [
                "CREATE INDEX IF NOT EXISTS idx_apps_category ON applications (category)",
                "CREATE INDEX IF NOT EXISTS idx_apps_rating ON applications (average_rating)",
                "CREATE INDEX IF NOT EXISTS idx_apps_downloads ON applications (download_count)",
                "CREATE INDEX IF NOT EXISTS idx_apps_cultural ON applications (spiritually_approved, gotong_royong_compatible)",
                "CREATE INDEX IF NOT EXISTS idx_reviews_app ON reviews (app_id)",
                "CREATE INDEX IF NOT EXISTS idx_reviews_rating ON reviews (rating)",
                "CREATE INDEX IF NOT EXISTS idx_downloads_app ON downloads (app_id)",
                "CREATE INDEX IF NOT EXISTS idx_downloads_date ON downloads (download_date)"
            ];
            
            foreach (query in indexQueries) {
                if (!connection.execute(query)) {
                    return false;
                }
            }
            
            return true;
        }
        
        // Insert new application
        public bool insertApplication(ApplicationRecord app) {
            string query = `INSERT INTO applications (
                id, name, name_indonesia, version, developer, category,
                description, description_indonesia, screenshots, icon_path,
                download_count, average_rating, review_count, file_size,
                cultural_tags, spiritually_approved, gotong_royong_compatible,
                supported_platforms, download_url, checksum, publish_date,
                last_update, is_active, submitted_by, submission_date, approval_status
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`;
            
            return connection.executeWithParams(query, [
                app.id, app.name, app.nameIndonesia, app.version, app.developer,
                app.category, app.description, app.descriptionIndonesia,
                JSON.stringify(app.screenshots), app.iconPath, app.downloadCount,
                app.averageRating, app.reviewCount, app.fileSize,
                JSON.stringify(app.culturalTags), app.spirituallyApproved,
                app.gotongRoyongCompatible, JSON.stringify(app.supportedPlatforms),
                app.downloadUrl, app.checksum, app.publishDate, app.lastUpdate,
                app.isActive, app.submittedBy, app.submissionDate, app.approvalStatus
            ]);
        }
        
        // Search applications
        public ApplicationRecord[] searchApplications(string searchTerm, string category = null) {
            string query = `SELECT * FROM applications WHERE is_active = TRUE`;
            string[] params = [];
            
            if (!searchTerm.isEmpty()) {
                query += ` AND (name LIKE ? OR name_indonesia LIKE ? OR description LIKE ? OR description_indonesia LIKE ?)`;
                string searchPattern = "%" + searchTerm + "%";
                params.append(searchPattern);
                params.append(searchPattern);
                params.append(searchPattern);
                params.append(searchPattern);
            }
            
            if (category != null) {
                query += ` AND category = ?`;
                params.append(category);
            }
            
            query += ` ORDER BY average_rating DESC, download_count DESC`;
            
            return connection.queryWithParams(query, params);
        }
        
        // Get featured applications
        public ApplicationRecord[] getFeaturedApplications() {
            string query = `SELECT * FROM applications 
                           WHERE is_active = TRUE 
                           AND spiritually_approved = TRUE 
                           AND average_rating >= 4.5 
                           ORDER BY download_count DESC, average_rating DESC 
                           LIMIT 20`;
            
            return connection.query(query);
        }
        
        // Get gotong royong applications
        public ApplicationRecord[] getGotongRoyongApplications() {
            string query = `SELECT a.*, g.total_shares, g.community_downloads 
                           FROM applications a 
                           JOIN gotong_royong_metrics g ON a.id = g.app_id 
                           WHERE a.is_active = TRUE 
                           AND a.gotong_royong_compatible = TRUE 
                           ORDER BY g.sharing_ratio DESC, g.total_shares DESC`;
            
            return connection.query(query);
        }
        
        // Insert review
        public bool insertReview(ReviewRecord review) {
            string query = `INSERT INTO reviews (
                id, app_id, user_id, user_name, rating, review_text,
                review_text_indonesia, review_date, helpful_votes,
                is_verified_purchase, culturally_relevant, cultural_aspects
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`;
            
            bool success = connection.executeWithParams(query, [
                review.id, review.appId, review.userId, review.userName,
                review.rating, review.reviewText, review.reviewTextIndonesia,
                review.reviewDate, review.helpfulVotes, review.isVerifiedPurchase,
                review.culturallyRelevant, JSON.stringify(review.culturalAspects)
            ]);
            
            if (success) {
                updateApplicationRating(review.appId);
            }
            
            return success;
        }
        
        // Update application rating
        private void updateApplicationRating(string appId) {
            string query = `UPDATE applications SET 
                           average_rating = (SELECT AVG(rating) FROM reviews WHERE app_id = ?),
                           review_count = (SELECT COUNT(*) FROM reviews WHERE app_id = ?)
                           WHERE id = ?`;
            
            connection.executeWithParams(query, [appId, appId, appId]);
        }
        
        // Record download
        public bool recordDownload(DownloadRecord download) {
            string query = `INSERT INTO downloads (
                id, app_id, user_id, download_date, platform, version,
                successful, ip_address, location
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`;
            
            bool success = connection.executeWithParams(query, [
                download.id, download.appId, download.userId, download.downloadDate,
                download.platform, download.version, download.successful,
                download.ipAddress, download.location
            ]);
            
            if (success && download.successful) {
                incrementDownloadCount(download.appId);
                updateGotongRoyongMetrics(download.appId);
            }
            
            return success;
        }
        
        // Increment download count
        private void incrementDownloadCount(string appId) {
            string query = `UPDATE applications SET download_count = download_count + 1 WHERE id = ?`;
            connection.executeWithParams(query, [appId]);
        }
        
        // Update gotong royong metrics
        private void updateGotongRoyongMetrics(string appId) {
            string query = `INSERT OR REPLACE INTO gotong_royong_metrics (
                app_id, total_shares, community_downloads, last_shared
            ) VALUES (
                ?, 
                COALESCE((SELECT total_shares FROM gotong_royong_metrics WHERE app_id = ?), 0) + 1,
                COALESCE((SELECT community_downloads FROM gotong_royong_metrics WHERE app_id = ?), 0) + 1,
                ?
            )`;
            
            connection.executeWithParams(query, [appId, appId, appId, DateTime.now()]);
        }
        
        // Get application statistics
        public ApplicationStats getApplicationStats(string appId) {
            string query = `SELECT 
                a.download_count,
                a.average_rating,
                a.review_count,
                g.total_shares,
                g.community_downloads,
                g.sharing_ratio
            FROM applications a
            LEFT JOIN gotong_royong_metrics g ON a.id = g.app_id
            WHERE a.id = ?`;
            
            var result = connection.queryWithParams(query, [appId]);
            if (result.length > 0) {
                return parseApplicationStats(result[0]);
            }
            
            return null;
        }
        
        // Get cultural compliance status
        public CulturalComplianceRecord getCulturalCompliance(string appId) {
            string query = `SELECT * FROM cultural_compliance WHERE app_id = ?`;
            var result = connection.queryWithParams(query, [appId]);
            
            if (result.length > 0) {
                return parseCulturalCompliance(result[0]);
            }
            
            return null;
        }
        
        // Update cultural compliance
        public bool updateCulturalCompliance(CulturalComplianceRecord compliance) {
            string query = `INSERT OR REPLACE INTO cultural_compliance (
                app_id, validation_date, validator_id, passed, passed_criteria,
                failed_criteria, notes, cultural_score, recommended_improvements
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`;
            
            return connection.executeWithParams(query, [
                compliance.appId, compliance.validationDate, compliance.validatorId,
                compliance.passed, JSON.stringify(compliance.passedCriteria),
                JSON.stringify(compliance.failedCriteria), compliance.notes,
                compliance.culturalScore, JSON.stringify(compliance.recommendedImprovements)
            ]);
        }
        
        // Helper methods
        private ApplicationStats parseApplicationStats(DatabaseRow row) {
            // Parse database row to ApplicationStats struct
            return new ApplicationStats(); // Implementation details
        }
        
        private CulturalComplianceRecord parseCulturalCompliance(DatabaseRow row) {
            // Parse database row to CulturalComplianceRecord
            return new CulturalComplianceRecord(); // Implementation details
        }
        
        // Close database connection
        public void close() {
            if (connection != null) {
                connection.close();
            }
        }
    }
    
    struct ApplicationStats {
        uint64 downloadCount;
        float averageRating;
        uint32 reviewCount;
        uint64 totalShares;
        uint64 communityDownloads;
        float sharingRatio;
    }
}
