/*
 * ============================================================================
 * builder_gui.khat - Visual Application Builder Khatulistiwa OS
 * Copyright (c) 2025 Dhafa Nazula Permadi & Team BIGCode By Cv Bintang Gumilang Group
 * ============================================================================
 * 
 * Visual builder lengkap dengan fitur:
 * 1. Drag & drop UI designer dengan komponen budaya
 * 2. Code editor dengan syntax highlighting KhatLang
 * 3. Live preview dengan hot reload
 * 4. Project templates berbudaya Indonesia
 * 5. Direct publishing ke KhatStore
 */

import "khatui/runtime.khat"
import "khatcore/system.khat"
import "khatcore/file.khat"
import "khatsdk/builder.khat"
import "khatstore/publisher.khat"
import "khatui/cultural.khat"
import "khatui/animations.khat"

// Konstanta aplikasi
konstan BUILDER_VERSION = "1.0.0"
konstan WINDOW_WIDTH = 1400
konstan WINDOW_HEIGHT = 900
konstan TOOLBOX_WIDTH = 250
konstan PROPERTIES_WIDTH = 300
konstan PREVIEW_WIDTH = 400

// Mode builder
enum BuilderMode {
    DESIGN = 0,
    CODE = 1,
    PREVIEW = 2,
    PUBLISH = 3
}

// Tipe komponen UI
enum ComponentType {
    LAYOUT = 0,
    INPUT = 1,
    DISPLAY = 2,
    CULTURAL = 3,
    CUSTOM = 4
}

// Struktur komponen UI
struct UIComponent {
    id: string,
    type: ComponentType,
    name: string,
    cultural_name: string,
    x: int,
    y: int,
    width: int,
    height: int,
    properties: ComponentProperty[],
    children: UIComponent[],
    cultural_icon: string,
    code_template: string
}

// Properti komponen
struct ComponentProperty {
    name: string,
    cultural_name: string,
    type: string,
    value: string,
    default_value: string,
    description: string
}

// Project state
struct BuilderProject {
    name: string,
    description: string,
    template_id: string,
    components: UIComponent[],
    code_files: CodeFile[],
    assets: AssetFile[],
    manifest: ProjectManifest,
    is_modified: bool,
    last_saved: time_t
}

// File kode
struct CodeFile {
    name: string,
    path: string,
    content: string,
    language: string,
    is_main: bool
}

// File asset
struct AssetFile {
    name: string,
    path: string,
    type: string,
    size: size_t,
    cultural_category: string
}

// State aplikasi
struct BuilderState {
    current_mode: BuilderMode,
    current_project: BuilderProject*,
    selected_component: UIComponent*,
    toolbox_components: UIComponent[],
    component_count: int,
    cultural_mode: bool,
    batik_theme: string,
    main_window: int,
    design_canvas: int,
    code_editor: int,
    preview_window: int,
    properties_panel: int,
    is_building: bool,
    is_previewing: bool
}

// Global state
var builder: BuilderState

// Inisialisasi aplikasi
fungsi builder_init() -> int {
    khat_log("[BUILDER] Menginisialisasi Builder GUI v" + BUILDER_VERSION)
    
    // Setup state awal
    builder.current_mode = DESIGN
    builder.current_project = null
    builder.selected_component = null
    builder.component_count = 0
    builder.cultural_mode = true
    builder.batik_theme = "gringsing"
    builder.is_building = false
    builder.is_previewing = false
    
    // Buat window utama
    if (create_main_window() != 0) {
        khat_log("[ERROR] Gagal membuat window utama")
        return -1
    }
    
    // Load komponen UI
    if (load_ui_components() != 0) {
        khat_log("[ERROR] Gagal memuat komponen UI")
        return -1
    }
    
    // Load project templates
    if (load_project_templates() != 0) {
        khat_log("[WARNING] Gagal memuat template project")
    }
    
    // Setup event handlers
    setup_builder_events()
    
    khat_log("[BUILDER] Builder GUI berhasil diinisialisasi!")
    return 0
}

// Buat window utama
fungsi create_main_window() -> int {
    khat_log("[BUILDER] Membuat window utama...")
    
    builder.main_window = khatui_create_window(
        "Builder GUI - Pembuat Aplikasi Nusantara",
        (khat_screen_width() - WINDOW_WIDTH) / 2,
        (khat_screen_height() - WINDOW_HEIGHT) / 2,
        WINDOW_WIDTH, WINDOW_HEIGHT,
        khat_get_current_app_id()
    )
    
    if (builder.main_window < 0) {
        return -1
    }
    
    // Set window properties
    khatui_set_window_cultural_theme(builder.main_window, builder.batik_theme)
    khatui_set_window_resizable(builder.main_window, true)
    khatui_set_window_min_size(builder.main_window, 1200, 700)
    
    // Render window
    render_builder_window()
    
    return 0
}

// Render window builder
fungsi render_builder_window() -> void {
    // Clear window
    khatui_clear_window(builder.main_window)
    
    // Background dengan motif pembangunan
    draw_builder_background()
    
    // Menu bar dengan tools
    draw_builder_menubar()
    
    // Toolbar dengan mode switching
    draw_builder_toolbar()
    
    // Content area berdasarkan mode
    draw_builder_content()
    
    // Status bar dengan info project
    draw_builder_statusbar()
}

// Gambar background builder
fungsi draw_builder_background() -> void {
    var bg_color = get_cultural_color("builder_bg")
    var pattern_color = get_cultural_color("construction_pattern")
    
    // Background dasar
    khatui_fill_rect(builder.main_window, 0, 0, 
                     WINDOW_WIDTH, WINDOW_HEIGHT, bg_color)
    
    // Overlay motif pembangunan halus
    khatui_draw_construction_pattern(builder.main_window,
                                     0, 0, WINDOW_WIDTH, WINDOW_HEIGHT,
                                     pattern_color, 0.03)
    
    // Border ornamen builder
    khatui_draw_cultural_border(builder.main_window,
                                0, 0, WINDOW_WIDTH, WINDOW_HEIGHT,
                                "ornamen_pembangunan")
}

// Gambar menu bar
fungsi draw_builder_menubar() -> void {
    var menubar_height = 30
    var menubar_bg = get_cultural_color("menubar_bg")
    
    // Background menu bar
    khatui_fill_rect(builder.main_window, 0, 0, 
                     WINDOW_WIDTH, menubar_height, menubar_bg)
    
    // Menu items
    var menu_items = ["Project", "Edit", "View", "Build", "Tools", "Help"]
    var menu_x = 10
    
    for (var i = 0; i < menu_items.length; i++) {
        var item_width = khatui_get_text_width(menu_items[i]) + 20
        
        // Menu item
        khatui_draw_text_cultural(builder.main_window, menu_x + 10, 8,
                                  menu_items[i], get_cultural_color("menu_text"),
                                  "menu_item")
        
        // Click handler
        khatui_add_click_handler(builder.main_window, menu_x, 0,
                                item_width, menubar_height, "menu_click", i)
        
        menu_x += item_width
    }
}

// Gambar toolbar
fungsi draw_builder_toolbar() -> void {
    var toolbar_y = 30
    var toolbar_height = 50
    var toolbar_bg = get_cultural_color("toolbar_bg")
    
    // Background toolbar
    khatui_fill_rect(builder.main_window, 0, toolbar_y, 
                     WINDOW_WIDTH, toolbar_height, toolbar_bg)
    
    // Mode buttons
    draw_mode_buttons(10, toolbar_y + 10, 400, 30)
    
    // Project actions
    draw_project_actions(450, toolbar_y + 10, 300, 30)
    
    // Build actions
    draw_build_actions(800, toolbar_y + 10, 200, 30)
}

// Gambar tombol mode
fungsi draw_mode_buttons(x: int, y: int, width: int, height: int) -> void {
    var modes = [
        {DESIGN, "Design", "Desain", "design_mode"},
        {CODE, "Code", "Kode", "code_mode"},
        {PREVIEW, "Preview", "Pratinjau", "preview_mode"},
        {PUBLISH, "Publish", "Terbitkan", "publish_mode"}
    ]
    
    var button_width = width / modes.length
    
    for (var i = 0; i < modes.length; i++) {
        var mode = modes[i]
        var button_x = x + i * button_width
        var is_active = (mode.id == builder.current_mode)
        
        // Background button
        var button_bg = is_active ?
                        get_cultural_color("mode_active") :
                        get_cultural_color("mode_normal")
        
        khatui_draw_rounded_rect(builder.main_window, button_x, y,
                                button_width - 5, height, 5, button_bg)
        
        // Icon mode
        khatui_draw_cultural_icon(builder.main_window, button_x + 5, y + 5,
                                  20, 20, mode.cultural_icon,
                                  get_cultural_color("mode_icon"))
        
        // Text mode
        var text_color = is_active ?
                         get_cultural_color("mode_active_text") :
                         get_cultural_color("mode_text")
        
        khatui_draw_text_cultural(builder.main_window, button_x + 30, y + 8,
                                  mode.cultural_name, text_color, "mode_text")
        
        // Click handler
        khatui_add_click_handler(builder.main_window, button_x, y,
                                button_width - 5, height, "mode_click", i)
    }
}

// Gambar content berdasarkan mode
fungsi draw_builder_content() -> void {
    var content_y = 80
    var content_height = WINDOW_HEIGHT - content_y - 30
    
    switch (builder.current_mode) {
        case DESIGN:
            draw_design_mode(0, content_y, WINDOW_WIDTH, content_height)
            break
        case CODE:
            draw_code_mode(0, content_y, WINDOW_WIDTH, content_height)
            break
        case PREVIEW:
            draw_preview_mode(0, content_y, WINDOW_WIDTH, content_height)
            break
        case PUBLISH:
            draw_publish_mode(0, content_y, WINDOW_WIDTH, content_height)
            break
    }
}

// Gambar mode design
fungsi draw_design_mode(x: int, y: int, width: int, height: int) -> void {
    // Toolbox komponen
    draw_component_toolbox(x, y, TOOLBOX_WIDTH, height)
    
    // Design canvas
    var canvas_x = x + TOOLBOX_WIDTH
    var canvas_width = width - TOOLBOX_WIDTH - PROPERTIES_WIDTH
    draw_design_canvas(canvas_x, y, canvas_width, height)
    
    // Properties panel
    var props_x = canvas_x + canvas_width
    draw_properties_panel(props_x, y, PROPERTIES_WIDTH, height)
}

// Gambar toolbox komponen
fungsi draw_component_toolbox(x: int, y: int, width: int, height: int) -> void {
    var toolbox_bg = get_cultural_color("toolbox_bg")
    
    // Background toolbox
    khatui_fill_rect(builder.main_window, x, y, width, height, toolbox_bg)
    
    // Header toolbox
    khatui_draw_text_cultural(builder.main_window, x + 10, y + 10,
                              "Komponen UI", get_cultural_color("toolbox_header"),
                              "toolbox_header")
    
    // Kategori komponen
    draw_component_categories(x + 5, y + 40, width - 10, height - 50)
}

// Gambar design canvas
fungsi draw_design_canvas(x: int, y: int, width: int, height: int) -> void {
    var canvas_bg = get_cultural_color("canvas_bg")
    
    // Background canvas
    khatui_fill_rect(builder.main_window, x, y, width, height, canvas_bg)
    
    // Grid helper
    draw_design_grid(x, y, width, height)
    
    // Komponen yang sudah ditempatkan
    if (builder.current_project) {
        draw_placed_components(x, y, width, height)
    } else {
        draw_empty_canvas_message(x, y, width, height)
    }
}

// Buat project baru
fungsi create_new_project(template_id: string, project_name: string) -> int {
    khat_log("[BUILDER] Membuat project baru: " + project_name)
    
    // Alokasi project baru
    var project = khat_memory_alloc(sizeof(BuilderProject))
    if (!project) {
        return -1
    }
    
    // Setup project
    project->name = project_name
    project->description = "Aplikasi " + project_name + " untuk Khatulistiwa OS"
    project->template_id = template_id
    project->is_modified = false
    project->last_saved = khat_get_current_time()
    
    // Load template
    if (load_project_template(project, template_id) != 0) {
        khat_memory_free(project)
        return -1
    }
    
    // Set sebagai project aktif
    builder.current_project = project
    
    // Refresh UI
    render_builder_window()
    
    khat_log("[BUILDER] Project '" + project_name + "' berhasil dibuat")
    return 0
}

// Build project menjadi .khapp
fungsi build_project() -> int {
    if (!builder.current_project) {
        khat_log("[ERROR] Tidak ada project yang aktif")
        return -1
    }
    
    builder.is_building = true
    khat_log("[BUILDER] Building project: " + builder.current_project->name)
    
    // Generate kode dari komponen visual
    if (generate_code_from_components() != 0) {
        builder.is_building = false
        return -1
    }
    
    // Build menggunakan khatsdk
    var output_file = builder.current_project->name + ".khapp"
    if (khatsdk_build_project(".", output_file) != 0) {
        builder.is_building = false
        return -1
    }
    
    builder.is_building = false
    khat_log("[BUILDER] Build berhasil: " + output_file)
    
    // Show success notification
    show_build_success_notification(output_file)
    
    return 0
}

// API untuk aplikasi lain
fungsi builder_gui_create_project(template_id: string, name: string) -> int {
    return create_new_project(template_id, name)
}

// Entry point aplikasi
fungsi main() -> int {
    if (builder_init() != 0) {
        return -1
    }
    
    // Main event loop
    while (true) {
        var event = khatui_get_next_event()
        if (event.type == "quit") {
            break
        }
        
        handle_builder_event(event.type, event.data)
        
        // Auto-save jika diperlukan
        if (builder.current_project && builder.current_project->is_modified) {
            auto_save_project()
        }
        
        khat_sleep(16)
    }
    
    // Cleanup
    builder_cleanup()
    
    return 0
}
