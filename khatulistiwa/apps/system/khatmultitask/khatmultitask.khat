/*
 * ============================================================================
 * khatmultitask.khat - Pengelola Multitasking Panggung Wayang Khatulistiwa OS
 * Copyright (c) 2025 Dhafa Nazula Permadi & Team BIGCode By Cv Bintang Gumilang Group
 * ============================================================================
 * 
 * Aplikasi pengelola multitasking dengan fitur:
 * 1. Split-screen management dengan tema panggung wayang
 * 2. Overlay window control dengan animasi garuda
 * 3. Gesture recognition dengan feedback gamelan
 * 4. Keyboard shortcuts dengan terminologi budaya
 * 5. Window switching dengan transisi tradisional
 */

import "khatui/runtime.khat"
import "khatcore/system.khat"
import "khatcore/input.khat"
import "windowmanager.khat"
import "layouts/split.khat"
import "layouts/overlay.khat"
import "khatui/cultural.khat"
import "khatui/animations.khat"

// Konstanta aplikasi
konstan MULTITASK_VERSION = "1.0.0"
konstan CONTROL_PANEL_WIDTH = 300
konstan CONTROL_PANEL_HEIGHT = 200
konstan GESTURE_TIMEOUT = 1000
konstan ANIMATION_DURATION = 400

// Mode multitasking
enum MultitaskMode {
    SINGLE = 0,
    SPLIT_HORIZONTAL = 1,
    SPLIT_VERTICAL = 2,
    OVERLAY = 3,
    GRID = 4,
    STACK = 5
}

// Status gesture
enum GestureState {
    IDLE = 0,
    DETECTING = 1,
    RECOGNIZED = 2,
    EXECUTING = 3
}

// Struktur gesture
struct Gesture {
    id: string,
    name: string,
    cultural_name: string,
    finger_count: int,
    direction: string,
    action: string,
    cultural_feedback: string,
    is_enabled: bool
}

// State aplikasi
struct MultitaskState {
    current_mode: MultitaskMode,
    previous_mode: MultitaskMode,
    active_windows: int[],
    window_count: int,
    focused_window: int,
    split_container: int,
    overlay_windows: int[],
    overlay_count: int,
    gesture_state: GestureState,
    gesture_start_time: time_t,
    gesture_fingers: int,
    gesture_start_x: int,
    gesture_start_y: int,
    gesture_current_x: int,
    gesture_current_y: int,
    control_panel_visible: bool,
    overview_mode: bool,
    cultural_mode: bool,
    animation_enabled: bool,
    audio_feedback_enabled: bool,
    batik_theme: string,
    wayang_style: string,
    main_window: int,
    control_panel_window: int,
    overview_window: int
}

// Global state
var multitask: MultitaskState

// Inisialisasi aplikasi
fungsi multitask_init() -> int {
    khat_log("[MULTITASK] Menginisialisasi KhatMultitask v" + MULTITASK_VERSION)
    
    // Setup state awal
    multitask.current_mode = SINGLE
    multitask.previous_mode = SINGLE
    multitask.window_count = 0
    multitask.focused_window = -1
    multitask.split_container = -1
    multitask.overlay_count = 0
    multitask.gesture_state = IDLE
    multitask.control_panel_visible = false
    multitask.overview_mode = false
    multitask.cultural_mode = true
    multitask.animation_enabled = true
    multitask.audio_feedback_enabled = true
    multitask.batik_theme = "wayang"
    multitask.wayang_style = "wayang_kulit"
    
    // Initialize subsystems
    if (wm_init() != 0) {
        khat_log("[ERROR] Gagal menginisialisasi WindowManager")
        return -1
    }
    
    if (split_init() != 0) {
        khat_log("[ERROR] Gagal menginisialisasi Split Layout")
        return -1
    }
    
    if (overlay_init() != 0) {
        khat_log("[ERROR] Gagal menginisialisasi Overlay Layout")
        return -1
    }
    
    // Setup event handlers
    setup_multitask_events()
    
    // Register keyboard shortcuts
    register_keyboard_shortcuts()
    
    // Initialize gesture recognition
    init_gesture_recognition()
    
    khat_log("[MULTITASK] KhatMultitask berhasil diinisialisasi!")
    return 0
}

// Setup event handlers
fungsi setup_multitask_events() -> void {
    // Window events
    khat_register_event_handler("window_created", on_window_created)
    khat_register_event_handler("window_destroyed", on_window_destroyed)
    khat_register_event_handler("window_focused", on_window_focused)
    
    // Input events
    khat_register_event_handler("key_down", on_key_down)
    khat_register_event_handler("gesture_detected", on_gesture_detected)
    khat_register_event_handler("touch_start", on_touch_start)
    khat_register_event_handler("touch_move", on_touch_move)
    khat_register_event_handler("touch_end", on_touch_end)
}

// Register keyboard shortcuts
fungsi register_keyboard_shortcuts() -> void {
    // Mode switching shortcuts
    khat_register_shortcut("Ctrl+1", "set_single_mode")
    khat_register_shortcut("Ctrl+2", "set_split_horizontal")
    khat_register_shortcut("Ctrl+3", "set_split_vertical")
    khat_register_shortcut("Ctrl+4", "set_overlay_mode")
    khat_register_shortcut("Ctrl+5", "set_grid_mode")
    khat_register_shortcut("Ctrl+6", "set_stack_mode")
    
    // Window management shortcuts
    khat_register_shortcut("Alt+Tab", "cycle_windows")
    khat_register_shortcut("Ctrl+Left", "snap_window_left")
    khat_register_shortcut("Ctrl+Right", "snap_window_right")
    khat_register_shortcut("Ctrl+Up", "maximize_window")
    khat_register_shortcut("Ctrl+Down", "minimize_window")
    khat_register_shortcut("Win+Tab", "show_overview")
}

// Set mode multitasking
fungsi set_multitask_mode(mode: MultitaskMode) -> int {
    if (mode == multitask.current_mode) {
        return 0  // Already in this mode
    }
    
    khat_log("[MULTITASK] Changing mode to: " + khat_int_to_string(mode))
    
    // Save previous mode
    multitask.previous_mode = multitask.current_mode
    multitask.current_mode = mode
    
    // Play mode change sound
    if (multitask.audio_feedback_enabled) {
        play_mode_change_sound(mode)
    }
    
    // Apply new layout
    switch (mode) {
        case SINGLE:
            apply_single_mode()
            break
        case SPLIT_HORIZONTAL:
            apply_split_horizontal_mode()
            break
        case SPLIT_VERTICAL:
            apply_split_vertical_mode()
            break
        case OVERLAY:
            apply_overlay_mode()
            break
        case GRID:
            apply_grid_mode()
            break
        case STACK:
            apply_stack_mode()
            break
    }
    
    // Update UI indicators
    update_mode_indicators()
    
    return 0
}

// Apply single mode
fungsi apply_single_mode() -> void {
    // Destroy existing split container
    if (multitask.split_container >= 0) {
        split_destroy_container(multitask.split_container)
        multitask.split_container = -1
    }
    
    // Hide all overlay windows
    hide_all_overlays()
    
    // Show focused window in fullscreen
    if (multitask.focused_window >= 0) {
        wm_set_split_mode(SINGLE)
        
        // Animate to fullscreen dengan wayang entrance
        if (multitask.animation_enabled) {
            start_wayang_entrance_animation(multitask.focused_window)
        }
    }
}

// Apply split horizontal mode
fungsi apply_split_horizontal_mode() -> void {
    if (multitask.window_count < 2) {
        khat_log("[MULTITASK] Tidak cukup window untuk split mode")
        return
    }
    
    // Get two most recent windows
    var primary_window = multitask.active_windows[0]
    var secondary_window = multitask.active_windows[1]
    
    // Create split container
    multitask.split_container = split_create_container(
        HORIZONTAL, primary_window, secondary_window,
        0, 0, khat_screen_width(), khat_screen_height()
    )
    
    // Set WindowManager to split mode
    wm_set_split_mode(SPLIT_HORIZONTAL)
    
    // Play split sound
    if (multitask.audio_feedback_enabled) {
        play_cultural_sound("wayang_split_horizontal")
    }
}

// Apply split vertical mode
fungsi apply_split_vertical_mode() -> void {
    if (multitask.window_count < 2) {
        khat_log("[MULTITASK] Tidak cukup window untuk split mode")
        return
    }
    
    // Get two most recent windows
    var primary_window = multitask.active_windows[0]
    var secondary_window = multitask.active_windows[1]
    
    // Create split container
    multitask.split_container = split_create_container(
        VERTICAL, primary_window, secondary_window,
        0, 0, khat_screen_width(), khat_screen_height()
    )
    
    // Set WindowManager to split mode
    wm_set_split_mode(SPLIT_VERTICAL)
    
    // Play split sound
    if (multitask.audio_feedback_enabled) {
        play_cultural_sound("wayang_split_vertical")
    }
}

// Apply overlay mode
fungsi apply_overlay_mode() -> void {
    if (multitask.window_count < 2) {
        return
    }
    
    // Primary window stays fullscreen
    var primary_window = multitask.active_windows[0]
    wm_maximize_window(primary_window)
    
    // Secondary windows become overlays
    for (var i = 1; i < multitask.window_count; i++) {
        var window_id = multitask.active_windows[i]
        
        // Calculate overlay position
        var overlay_x = 100 + i * 50
        var overlay_y = 100 + i * 50
        var overlay_width = 400
        var overlay_height = 300
        
        // Create overlay
        var overlay_id = overlay_create_window(window_id, FLOATING,
                                               overlay_x, overlay_y,
                                               overlay_width, overlay_height)
        
        if (overlay_id >= 0) {
            multitask.overlay_windows[multitask.overlay_count] = overlay_id
            multitask.overlay_count++
        }
    }
    
    // Set WindowManager to overlay mode
    wm_set_split_mode(OVERLAY)
    
    // Play overlay sound
    if (multitask.audio_feedback_enabled) {
        play_cultural_sound("garuda_flying")
    }
}

// Handle gesture detection
fungsi on_gesture_detected(gesture_data: string) -> void {
    var gesture_info = parse_gesture_data(gesture_data)
    
    khat_log("[MULTITASK] Gesture detected: " + gesture_info.name)
    
    // Execute gesture action
    execute_gesture_action(gesture_info.action)
    
    // Play cultural feedback
    if (multitask.audio_feedback_enabled) {
        play_cultural_sound(gesture_info.cultural_feedback)
    }
    
    // Show visual feedback
    show_gesture_feedback(gesture_info)
}

// Execute gesture action
fungsi execute_gesture_action(action: string) -> void {
    if (action == "split_horizontal") {
        set_multitask_mode(SPLIT_HORIZONTAL)
    } else if (action == "split_vertical") {
        set_multitask_mode(SPLIT_VERTICAL)
    } else if (action == "show_all_windows") {
        show_overview_mode()
    } else if (action == "minimize_window") {
        if (multitask.focused_window >= 0) {
            wm_minimize_window(multitask.focused_window)
        }
    } else if (action == "maximize_window") {
        if (multitask.focused_window >= 0) {
            wm_maximize_window(multitask.focused_window)
        }
    }
}

// Handle three finger swipe
fungsi handle_three_finger_swipe(direction: string) -> void {
    khat_log("[MULTITASK] Three finger swipe: " + direction)
    
    if (direction == "left" || direction == "right") {
        set_multitask_mode(SPLIT_HORIZONTAL)
        
        // Play gamelan left/right sound
        if (multitask.audio_feedback_enabled) {
            if (direction == "left") {
                play_cultural_sound("gamelan_kiri")
            } else {
                play_cultural_sound("gamelan_kanan")
            }
        }
    } else if (direction == "up" || direction == "down") {
        set_multitask_mode(SPLIT_VERTICAL)
        
        // Play gamelan up/down sound
        if (multitask.audio_feedback_enabled) {
            if (direction == "up") {
                play_cultural_sound("gamelan_atas")
            } else {
                play_cultural_sound("gamelan_bawah")
            }
        }
    }
    
    // Show visual gesture trail
    show_gesture_trail(direction)
}

// Show overview mode
fungsi show_overview_mode() -> void {
    multitask.overview_mode = true
    
    khat_log("[MULTITASK] Showing overview mode")
    
    // Create overview window
    multitask.overview_window = create_overview_window()
    
    // Arrange all windows in grid
    arrange_overview_windows()
    
    // Play overview sound
    if (multitask.audio_feedback_enabled) {
        play_cultural_sound("gamelan_overview")
    }
}

// Create overview window
fungsi create_overview_window() -> int {
    var overview_window = khatui_create_window(
        "Semua Panggung - Overview Mode",
        0, 0, khat_screen_width(), khat_screen_height(),
        khat_get_current_app_id()
    )
    
    if (overview_window < 0) {
        return -1
    }
    
    // Set window properties
    khatui_set_window_cultural_theme(overview_window, multitask.batik_theme)
    khatui_set_window_type(overview_window, "overlay")
    
    // Render overview content
    render_overview_content(overview_window)
    
    return overview_window
}

// Render overview content
fungsi render_overview_content(window_id: int) -> void {
    // Clear window
    khatui_clear_window(window_id)
    
    // Background dengan motif panggung wayang
    draw_wayang_stage_background(window_id)
    
    // Title
    khatui_draw_text_cultural(window_id, 50, 50,
                              "Semua Panggung Wayang", 
                              get_cultural_color("overview_title"),
                              "overview_title")
    
    // Window thumbnails dalam grid
    draw_window_thumbnails(window_id)
    
    // Mode selector
    draw_mode_selector(window_id)
}

// Draw window thumbnails
fungsi draw_window_thumbnails(window_id: int) -> void {
    var thumbnail_width = 200
    var thumbnail_height = 150
    var margin = 20
    var cols = 4
    var start_x = 100
    var start_y = 150
    
    for (var i = 0; i < multitask.window_count; i++) {
        var row = i / cols
        var col = i % cols
        
        var thumb_x = start_x + col * (thumbnail_width + margin)
        var thumb_y = start_y + row * (thumbnail_height + margin)
        
        // Draw thumbnail dengan border wayang
        draw_window_thumbnail(window_id, multitask.active_windows[i],
                              thumb_x, thumb_y, thumbnail_width, thumbnail_height)
    }
}

// Cycle through windows (Alt+Tab)
fungsi cycle_windows() -> void {
    if (multitask.window_count <= 1) {
        return
    }
    
    // Find next window
    var current_index = -1
    for (var i = 0; i < multitask.window_count; i++) {
        if (multitask.active_windows[i] == multitask.focused_window) {
            current_index = i
            break
        }
    }
    
    var next_index = (current_index + 1) % multitask.window_count
    var next_window = multitask.active_windows[next_index]
    
    // Focus next window
    wm_focus_window(next_window)
    multitask.focused_window = next_window
    
    // Play window switch sound
    if (multitask.audio_feedback_enabled) {
        play_cultural_sound("wayang_switch")
    }
    
    // Show window switcher overlay
    show_window_switcher_overlay()
}

// Show window switcher overlay
fungsi show_window_switcher_overlay() -> void {
    // Create temporary overlay showing window list
    var switcher_width = 400
    var switcher_height = 200
    var switcher_x = (khat_screen_width() - switcher_width) / 2
    var switcher_y = (khat_screen_height() - switcher_height) / 2
    
    var switcher_overlay = overlay_create_window(-1, NOTIFICATION,
                                                 switcher_x, switcher_y,
                                                 switcher_width, switcher_height)
    
    // Auto-hide after 2 seconds
    khat_set_timer(2000, "hide_window_switcher")
}

// Handle keyboard shortcuts
fungsi on_key_down(key_data: string) -> void {
    var key_info = parse_key_data(key_data)
    
    // Check for registered shortcuts
    if (key_info.modifiers & KHAT_MOD_CTRL) {
        switch (key_info.key) {
            case "1":
                set_multitask_mode(SINGLE)
                break
            case "2":
                set_multitask_mode(SPLIT_HORIZONTAL)
                break
            case "3":
                set_multitask_mode(SPLIT_VERTICAL)
                break
            case "4":
                set_multitask_mode(OVERLAY)
                break
            case "5":
                set_multitask_mode(GRID)
                break
            case "6":
                set_multitask_mode(STACK)
                break
            case "Left":
                snap_window_left()
                break
            case "Right":
                snap_window_right()
                break
            case "Up":
                maximize_current_window()
                break
            case "Down":
                minimize_current_window()
                break
        }
    } else if (key_info.modifiers & KHAT_MOD_ALT) {
        if (key_info.key == "Tab") {
            cycle_windows()
        }
    } else if (key_info.modifiers & KHAT_MOD_WIN) {
        if (key_info.key == "Tab") {
            show_overview_mode()
        }
    }
}

// Snap window to left
fungsi snap_window_left() -> void {
    if (multitask.focused_window >= 0) {
        wm_snap_window_left(multitask.focused_window)
        
        // Play snap sound
        if (multitask.audio_feedback_enabled) {
            play_cultural_sound("wayang_snap_left")
        }
    }
}

// Snap window to right
fungsi snap_window_right() -> void {
    if (multitask.focused_window >= 0) {
        wm_snap_window_right(multitask.focused_window)
        
        // Play snap sound
        if (multitask.audio_feedback_enabled) {
            play_cultural_sound("wayang_snap_right")
        }
    }
}

// Update mode indicators
fungsi update_mode_indicators() -> void {
    // Update taskbar indicator
    update_taskbar_mode_indicator(multitask.current_mode)
    
    // Show temporary mode notification
    show_mode_change_notification(multitask.current_mode)
}

// Show mode change notification
fungsi show_mode_change_notification(mode: MultitaskMode) -> void {
    var mode_names = [
        "Panggung Tunggal",
        "Panggung Berdampingan",
        "Panggung Bertingkat",
        "Panggung Mengambang",
        "Panggung Empat Sudut",
        "Panggung Berlapis"
    ]
    
    var notification_text = "Mode: " + mode_names[mode]
    
    // Create notification overlay
    var notif_width = 300
    var notif_height = 80
    var notif_x = (khat_screen_width() - notif_width) / 2
    var notif_y = 100
    
    var notification = overlay_create_window(-1, NOTIFICATION,
                                             notif_x, notif_y,
                                             notif_width, notif_height)
    
    // Auto-hide after 3 seconds
    khat_set_timer(3000, "hide_mode_notification")
}

// API untuk aplikasi lain
fungsi multitask_get_current_mode() -> MultitaskMode {
    return multitask.current_mode
}

fungsi multitask_set_mode(mode: MultitaskMode) -> int {
    return set_multitask_mode(mode)
}

// Entry point aplikasi
fungsi main() -> int {
    if (multitask_init() != 0) {
        return -1
    }
    
    // Main event loop
    while (true) {
        var event = khatui_get_next_event()
        if (event.type == "quit") {
            break
        }
        
        // Handle events
        handle_multitask_event(event.type, event.data)
        
        // Update animations
        update_multitask_animations()
        
        khat_sleep(16)
    }
    
    // Cleanup
    multitask_cleanup()
    
    return 0
}
